
IndustrialStuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002108  08002108  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002108  08002108  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002108  08002108  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  24000000  08002114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  240000b0  080021c4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000104  080021c4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090fd  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6f  00000000  00000000  000291db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b0  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002c13c  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000519f  00000000  00000000  0005713c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f07db  00000000  00000000  0005c2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014cab6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000002e0  00000000  00000000  0014cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000119c  00000000  00000000  0014ce18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b0 	.word	0x240000b0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002060 	.word	0x08002060

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000b4 	.word	0x240000b4
 80002d4:	08002060 	.word	0x08002060

080002d8 <_ZN5Delay4initEv>:
#include "delay.h"

void Delay::init(void) noexcept
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	DELAY_TIMER->PSC = 120;
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	2278      	movs	r2, #120	; 0x78
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
	DELAY_TIMER->CR1 = 0;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <_ZN5Delay2usEm>:

void Delay::us(u32 us) noexcept
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]

	DELAY_TIMER->ARR = us;
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	62d3      	str	r3, [r2, #44]	; 0x2c
	DELAY_TIMER->CNT = 0;
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
	DELAY_TIMER->SR = 0;
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
	DELAY_TIMER->CR1 |= TIM_CR1_CEN | TIM_CR1_OPM;
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	f043 0309 	orr.w	r3, r3, #9
 8000324:	6013      	str	r3, [r2, #0]

	while (!(DELAY_TIMER->SR & TIM_SR_UIF));
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	691b      	ldr	r3, [r3, #16]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	bf0c      	ite	eq
 8000334:	2301      	moveq	r3, #1
 8000336:	2300      	movne	r3, #0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	d000      	beq.n	8000340 <_ZN5Delay2usEm+0x4a>
 800033e:	e7f2      	b.n	8000326 <_ZN5Delay2usEm+0x30>
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <_ZN5Delay2msEm>:

void Delay::ms(u32 ms) noexcept
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for (u16 i = 0; i < ms; ++i)
 8000354:	2300      	movs	r3, #0
 8000356:	81fb      	strh	r3, [r7, #14]
 8000358:	89fb      	ldrh	r3, [r7, #14]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	429a      	cmp	r2, r3
 800035e:	d907      	bls.n	8000370 <_ZN5Delay2msEm+0x24>
		Delay::us(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f7ff ffc7 	bl	80002f6 <_ZN5Delay2usEm>
	for (u16 i = 0; i < ms; ++i)
 8000368:	89fb      	ldrh	r3, [r7, #14]
 800036a:	3301      	adds	r3, #1
 800036c:	81fb      	strh	r3, [r7, #14]
 800036e:	e7f3      	b.n	8000358 <_ZN5Delay2msEm+0xc>
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <_Z5setupv>:
#include "sysclk.h"

extern u8 eth_connected_bitmap[7];

void setup(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	sysclk_init();
 800037c:	f000 fa58 	bl	8000830 <_Z11sysclk_initv>
	//
	// Enables clocks
	//

	// Enables used USART's
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <_Z5setupv+0x8c>)
 8000382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000386:	4a1f      	ldr	r2, [pc, #124]	; (8000404 <_Z5setupv+0x8c>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	// Enables used GPIO's
	RCC->AHB4ENR |= RCC_AHB4ENR_GPIOAEN | RCC_AHB4ENR_GPIOBEN;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <_Z5setupv+0x8c>)
 8000392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000396:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <_Z5setupv+0x8c>)
 8000398:	f043 0303 	orr.w	r3, r3, #3
 800039c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Enables all the SPI's
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <_Z5setupv+0x8c>)
 80003a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <_Z5setupv+0x8c>)
 80003a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	// Enables all the Timers
	RCC->APB1LENR |= RCC_APB1LENR_TIM2EN | RCC_APB1LENR_SPI2EN;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <_Z5setupv+0x8c>)
 80003b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80003b6:	4913      	ldr	r1, [pc, #76]	; (8000404 <_Z5setupv+0x8c>)
 80003b8:	f244 0301 	movw	r3, #16385	; 0x4001
 80003bc:	4313      	orrs	r3, r2
 80003be:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
	//
	// Initialize RS232
	//

	// Configure the RS232 RX/TX pins ( PA10, PA9 )
	GPIOA->MODER &= ~((GPIO_MODE_MASK << GPIO_MODER_MODE10_Pos) |
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <_Z5setupv+0x90>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <_Z5setupv+0x90>)
 80003c8:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80003cc:	6013      	str	r3, [r2, #0]
			(GPIO_MODE_MASK << GPIO_MODER_MODE9_Pos));

	GPIOA->MODER |= ((GPIO_MODE_AF << GPIO_MODER_MODE10_Pos) |
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <_Z5setupv+0x90>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <_Z5setupv+0x90>)
 80003d4:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 80003d8:	6013      	str	r3, [r2, #0]
			(GPIO_MODE_AF << GPIO_MODER_MODE9_Pos));

	GPIOA->AFR[1] |= ((7 << GPIO_AFRH_AFSEL9_Pos) |
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <_Z5setupv+0x90>)
 80003dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <_Z5setupv+0x90>)
 80003e0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003e4:	6253      	str	r3, [r2, #36]	; 0x24
			(7 << GPIO_AFRH_AFSEL9_Pos));

	// Configure the RS232 USART
	Hardware::RS232::init(115200);
 80003e6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80003ea:	f000 fe87 	bl	80010fc <_ZN8Hardware5RS2324initEm>
	printf("RS232 Ready\n");
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <_Z5setupv+0x94>)
 80003f0:	f001 fa2a 	bl	8001848 <puts>

	//
	// Initialize other stuff
	//

	Hardware::RandomNumberGenerator::init();
 80003f4:	f000 fe3c 	bl	8001070 <_ZN8Hardware21RandomNumberGenerator4initEv>
	Hardware::RTCDriver::init();
 80003f8:	f000 fede 	bl	80011b8 <_ZN8Hardware9RTCDriver4initEv>
	Delay::init();
 80003fc:	f7ff ff6c 	bl	80002d8 <_ZN5Delay4initEv>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	58024400 	.word	0x58024400
 8000408:	58020000 	.word	0x58020000
 800040c:	08002078 	.word	0x08002078

08000410 <_Z8lcd_initv>:
static Drivers::ILI9341 lcdDriver(lcd_spi, LCD_GPIO, LCD_RESET, LCD_DC);
static Drivers::NordicSemi::NRF24L01 nrf24l01Driver(nrf24l01Config, nrf24l01SPI,
		NRF24L01_GPIO, NRF24L01_CE);

void lcd_init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	//
	// Configure SPI1 GPIO
	//

	// Reset all GPIO's
	LCD_GPIO->MODER &= ~((GPIO_MODE_MASK << (2 * LCD_RESET))
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4925      	ldr	r1, [pc, #148]	; (80004b0 <_Z8lcd_initv+0xa0>)
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <_Z8lcd_initv+0xa4>)
 800041c:	4013      	ands	r3, r2
 800041e:	600b      	str	r3, [r1, #0]
			| (GPIO_MODE_MASK << (2 * LCD_SCK))
			| (GPIO_MODE_MASK << (2 * LCD_MISO))
			| (GPIO_MODE_MASK << (2 * LCD_MOSI)));

	// Sets the actual pin modes
	LCD_GPIO->MODER |= ((GPIO_MODE_OUTPUT << (2 * LCD_RESET))
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4922      	ldr	r1, [pc, #136]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000426:	f64a 2350 	movw	r3, #43600	; 0xaa50
 800042a:	4313      	orrs	r3, r2
 800042c:	600b      	str	r3, [r1, #0]
			| (GPIO_MODE_AF << (2 * LCD_SCK))
			| (GPIO_MODE_AF << (2 * LCD_MISO))
			| (GPIO_MODE_AF << (2 * LCD_MOSI)));

	// Sets the default pin values
	LCD_GPIO->ODR |= _BV(LCD_RESET); // Reset is Active Low
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6153      	str	r3, [r2, #20]

	// Resets the default PUPD
	LCD_GPIO->PUPDR &= ~((GPIO_PUPDR_RESET << (2 * LCD_RESET))
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <_Z8lcd_initv+0xa0>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000444:	60d3      	str	r3, [r2, #12]
			| (GPIO_PUPDR_RESET << (2 * LCD_DC)));

	// Sets pull down
	LCD_GPIO->PUPDR |= ((GPIO_PUPDR_PULLDOWN << (2 * LCD_RESET))
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <_Z8lcd_initv+0xa0>)
 800044c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000450:	60d3      	str	r3, [r2, #12]
			| (GPIO_PUPDR_PULLDOWN << (2 * LCD_DC)));

	// Selects the alternative functions
	LCD_GPIO->AFR[0] |= ((5 << (LCD_CS * 4))
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000454:	6a1a      	ldr	r2, [r3, #32]
 8000456:	4916      	ldr	r1, [pc, #88]	; (80004b0 <_Z8lcd_initv+0xa0>)
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <_Z8lcd_initv+0xa8>)
 800045a:	4313      	orrs	r3, r2
 800045c:	620b      	str	r3, [r1, #32]
	//
	// Configure SPI2 GPIO
	//

	// Resets the GPIO's
	NRF24L01_GPIO->MODER &= ~((GPIO_MODE_MASK << (2 * NRF24L01_CS))
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <_Z8lcd_initv+0xac>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <_Z8lcd_initv+0xac>)
 8000464:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8000468:	6013      	str	r3, [r2, #0]
			| (GPIO_MODE_MASK << (2 * NRF24L01_MISO))
			| (GPIO_MODE_MASK << (2 * NRF24L01_MOSI))
			| (GPIO_MODE_MASK << (2 * NRF24L01_CE)));

	// Sets the actual pin modes
	NRF24L01_GPIO->MODER |= ((GPIO_MODE_AF << (2 * NRF24L01_CS))
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <_Z8lcd_initv+0xac>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	4913      	ldr	r1, [pc, #76]	; (80004bc <_Z8lcd_initv+0xac>)
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <_Z8lcd_initv+0xb0>)
 8000472:	4313      	orrs	r3, r2
 8000474:	600b      	str	r3, [r1, #0]
			| (GPIO_MODE_AF << (2 * NRF24L01_MISO))
			| (GPIO_MODE_AF << (2 * NRF24L01_MOSI))
			| (GPIO_MODE_OUTPUT << (2 * NRF24L01_CE)));

	// Selects the alternative functions
	NRF24L01_GPIO->AFR[1] |= ((5 << ((NRF24L01_CS - 8) * 4))
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <_Z8lcd_initv+0xac>)
 8000478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800047a:	4910      	ldr	r1, [pc, #64]	; (80004bc <_Z8lcd_initv+0xac>)
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <_Z8lcd_initv+0xa8>)
 800047e:	4313      	orrs	r3, r2
 8000480:	624b      	str	r3, [r1, #36]	; 0x24
			| (5 << ((NRF24L01_SCK - 8) * 4))
			| (5 << ((NRF24L01_MISO - 8) * 4))
			| (5 << ((NRF24L01_MOSI - 8) * 4)));

	// Resets the default PUPD
	NRF24L01_GPIO->PUPDR &= ~((GPIO_PUPDR_RESET << (2 * NRF24L01_CE)));
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <_Z8lcd_initv+0xac>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <_Z8lcd_initv+0xac>)
 8000488:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800048c:	60d3      	str	r3, [r2, #12]

	// Sets pull down
	NRF24L01_GPIO->PUPDR |= ((GPIO_PUPDR_PULLDOWN << (2 * NRF24L01_CE)));
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <_Z8lcd_initv+0xac>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <_Z8lcd_initv+0xac>)
 8000494:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000498:	60d3      	str	r3, [r2, #12]

	//
	// Initializes the SPI & ILI9341 driver
	//

	lcd_spi.init();
 800049a:	480a      	ldr	r0, [pc, #40]	; (80004c4 <_Z8lcd_initv+0xb4>)
 800049c:	f001 f838 	bl	8001510 <_ZN8Hardware3SPI4initEv>
	nrf24l01SPI.init();
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <_Z8lcd_initv+0xb8>)
 80004a2:	f001 f835 	bl	8001510 <_ZN8Hardware3SPI4initEv>

	// Performs LCD initialization
	lcdDriver.init();
 80004a6:	4809      	ldr	r0, [pc, #36]	; (80004cc <_Z8lcd_initv+0xbc>)
 80004a8:	f000 fc0c 	bl	8000cc4 <_ZN7Drivers7ILI93414initEv>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	58020000 	.word	0x58020000
 80004b4:	ffff000f 	.word	0xffff000f
 80004b8:	55550000 	.word	0x55550000
 80004bc:	58020400 	.word	0x58020400
 80004c0:	aa400000 	.word	0xaa400000
 80004c4:	240000cc 	.word	0x240000cc
 80004c8:	240000d0 	.word	0x240000d0
 80004cc:	240000d4 	.word	0x240000d4

080004d0 <main>:
		0b00010000,
		0b00111000
};

extern "C" int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af02      	add	r7, sp, #8
	setup();
 80004d6:	f7ff ff4f 	bl	8000378 <_Z5setupv>
	lcd_init();
 80004da:	f7ff ff99 	bl	8000410 <_Z8lcd_initv>

    /* Loop forever */
	Drivers::ILI9341_Color_t white;
	white.red = 0b111111 - 6;
 80004de:	7c3b      	ldrb	r3, [r7, #16]
 80004e0:	2239      	movs	r2, #57	; 0x39
 80004e2:	f362 0305 	bfi	r3, r2, #0, #6
 80004e6:	743b      	strb	r3, [r7, #16]
	white.blue = 0b111111 - 6;
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	2239      	movs	r2, #57	; 0x39
 80004ec:	f362 3311 	bfi	r3, r2, #12, #6
 80004f0:	613b      	str	r3, [r7, #16]
	white.green = 0b111111 - 6;
 80004f2:	8a3b      	ldrh	r3, [r7, #16]
 80004f4:	2239      	movs	r2, #57	; 0x39
 80004f6:	f362 138b 	bfi	r3, r2, #6, #6
 80004fa:	823b      	strh	r3, [r7, #16]

	Drivers::ILI9341_Color_t gray;
	gray.red = 0b111111 - 40;
 80004fc:	7b3b      	ldrb	r3, [r7, #12]
 80004fe:	2217      	movs	r2, #23
 8000500:	f362 0305 	bfi	r3, r2, #0, #6
 8000504:	733b      	strb	r3, [r7, #12]
	gray.blue = 0b111111 - 40;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2217      	movs	r2, #23
 800050a:	f362 3311 	bfi	r3, r2, #12, #6
 800050e:	60fb      	str	r3, [r7, #12]
	gray.green = 0b111111 - 40;
 8000510:	89bb      	ldrh	r3, [r7, #12]
 8000512:	2217      	movs	r2, #23
 8000514:	f362 138b 	bfi	r3, r2, #6, #6
 8000518:	81bb      	strh	r3, [r7, #12]

	Drivers::ILI9341_Color_t color;
	color.red = 4;
 800051a:	7a3b      	ldrb	r3, [r7, #8]
 800051c:	2204      	movs	r2, #4
 800051e:	f362 0305 	bfi	r3, r2, #0, #6
 8000522:	723b      	strb	r3, [r7, #8]
	color.blue = 4;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2204      	movs	r2, #4
 8000528:	f362 3311 	bfi	r3, r2, #12, #6
 800052c:	60bb      	str	r3, [r7, #8]
	color.green = 4;
 800052e:	893b      	ldrh	r3, [r7, #8]
 8000530:	2204      	movs	r2, #4
 8000532:	f362 138b 	bfi	r3, r2, #6, #6
 8000536:	813b      	strh	r3, [r7, #8]

	// Draws the background colors
	lcdDriver.clear(white);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	485e      	ldr	r0, [pc, #376]	; (80006b8 <main+0x1e8>)
 8000540:	f000 fd63 	bl	800100a <_ZN7Drivers7ILI93415clearERKNS_15ILI9341_Color_tE>
	lcdDriver.drawSquare(color, 0, ILI9341_WIDTH, 0, TASKBAR_HEIGHT);
 8000544:	f107 0108 	add.w	r1, r7, #8
 8000548:	2319      	movs	r3, #25
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2300      	movs	r3, #0
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	23f0      	movs	r3, #240	; 0xf0
 8000552:	2200      	movs	r2, #0
 8000554:	4858      	ldr	r0, [pc, #352]	; (80006b8 <main+0x1e8>)
 8000556:	f000 fd05 	bl	8000f64 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt>

	// Puts the connected icon
	lcdDriver.drawBitmap(white, eth_connected_bitmap, 10, TASKBAR_PADDING, 7);
 800055a:	f107 0110 	add.w	r1, r7, #16
 800055e:	2307      	movs	r3, #7
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	230a      	movs	r3, #10
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	230a      	movs	r3, #10
 8000568:	4a54      	ldr	r2, [pc, #336]	; (80006bc <main+0x1ec>)
 800056a:	4853      	ldr	r0, [pc, #332]	; (80006b8 <main+0x1e8>)
 800056c:	f000 fc63 	bl	8000e36 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth>

	// Puts the button
	lcdDriver.drawSquare(gray, BUTTON_PADDING, ILI9341_WIDTH - BUTTON_PADDING, TASKBAR_HEIGHT + BUTTON_PADDING, TASKBAR_HEIGHT + BUTTON_PADDING + 40);
 8000570:	f107 010c 	add.w	r1, r7, #12
 8000574:	234b      	movs	r3, #75	; 0x4b
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	2323      	movs	r3, #35	; 0x23
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	23e6      	movs	r3, #230	; 0xe6
 800057e:	220a      	movs	r2, #10
 8000580:	484d      	ldr	r0, [pc, #308]	; (80006b8 <main+0x1e8>)
 8000582:	f000 fcef 	bl	8000f64 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt>

	// Starts the main loop
	u8 seconds_prev = 255;
 8000586:	23ff      	movs	r3, #255	; 0xff
 8000588:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		Hardware::RTC_Time_t time = Hardware::RTCDriver::getTime();
 800058a:	f000 fe53 	bl	8001234 <_ZN8Hardware9RTCDriver7getTimeEv>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	713a      	strb	r2, [r7, #4]
 8000594:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000598:	717a      	strb	r2, [r7, #5]
 800059a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800059e:	71bb      	strb	r3, [r7, #6]

		// Update taskbar every second
		if (time.seconds != seconds_prev)
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	7dfa      	ldrb	r2, [r7, #23]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d0f0      	beq.n	800058a <main+0xba>
		{
			seconds_prev = time.seconds;
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	75fb      	strb	r3, [r7, #23]

			// Clears the taskbar background
			lcdDriver.drawSquare(color, ILI9341_WIDTH - TASKBAR_PADDING - 56, ILI9341_WIDTH, 0, TASKBAR_HEIGHT);
 80005ac:	f107 0108 	add.w	r1, r7, #8
 80005b0:	2319      	movs	r3, #25
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2300      	movs	r3, #0
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	23f0      	movs	r3, #240	; 0xf0
 80005ba:	22ae      	movs	r2, #174	; 0xae
 80005bc:	483e      	ldr	r0, [pc, #248]	; (80006b8 <main+0x1e8>)
 80005be:	f000 fcd1 	bl	8000f64 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt>

			// Seconds
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING, TASKBAR_PADDING, time.seconds / 10);
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	4a3e      	ldr	r2, [pc, #248]	; (80006c0 <main+0x1f0>)
 80005c6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f107 0110 	add.w	r1, r7, #16
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	230a      	movs	r3, #10
 80005d6:	22e6      	movs	r2, #230	; 0xe6
 80005d8:	4837      	ldr	r0, [pc, #220]	; (80006b8 <main+0x1e8>)
 80005da:	f000 fbc7 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING - 8, TASKBAR_PADDING, time.seconds % 10);
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <main+0x1f0>)
 80005e2:	fba3 1302 	umull	r1, r3, r3, r2
 80005e6:	08d9      	lsrs	r1, r3, #3
 80005e8:	460b      	mov	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f107 0110 	add.w	r1, r7, #16
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	230a      	movs	r3, #10
 80005fc:	22de      	movs	r2, #222	; 0xde
 80005fe:	482e      	ldr	r0, [pc, #184]	; (80006b8 <main+0x1e8>)
 8000600:	f000 fbb4 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>

			// Colon
			lcdDriver.drawBitmap(white, colon, ILI9341_WIDTH - TASKBAR_PADDING - 16, TASKBAR_PADDING, 5);
 8000604:	f107 0110 	add.w	r1, r7, #16
 8000608:	2305      	movs	r3, #5
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	230a      	movs	r3, #10
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	23d6      	movs	r3, #214	; 0xd6
 8000612:	4a2c      	ldr	r2, [pc, #176]	; (80006c4 <main+0x1f4>)
 8000614:	4828      	ldr	r0, [pc, #160]	; (80006b8 <main+0x1e8>)
 8000616:	f000 fc0e 	bl	8000e36 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth>

			// Minutes
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING - 24, TASKBAR_PADDING, time.minutes / 10);
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <main+0x1f0>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f107 0110 	add.w	r1, r7, #16
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	230a      	movs	r3, #10
 800062e:	22ce      	movs	r2, #206	; 0xce
 8000630:	4821      	ldr	r0, [pc, #132]	; (80006b8 <main+0x1e8>)
 8000632:	f000 fb9b 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING - 32, TASKBAR_PADDING, time.minutes % 10);
 8000636:	797a      	ldrb	r2, [r7, #5]
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <main+0x1f0>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	08d9      	lsrs	r1, r3, #3
 8000640:	460b      	mov	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f107 0110 	add.w	r1, r7, #16
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	230a      	movs	r3, #10
 8000654:	22c6      	movs	r2, #198	; 0xc6
 8000656:	4818      	ldr	r0, [pc, #96]	; (80006b8 <main+0x1e8>)
 8000658:	f000 fb88 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>

			// Colon
			lcdDriver.drawBitmap(white, colon, ILI9341_WIDTH - TASKBAR_PADDING - 40, TASKBAR_PADDING, 5);
 800065c:	f107 0110 	add.w	r1, r7, #16
 8000660:	2305      	movs	r3, #5
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	230a      	movs	r3, #10
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	23be      	movs	r3, #190	; 0xbe
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <main+0x1f4>)
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x1e8>)
 800066e:	f000 fbe2 	bl	8000e36 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth>

			// Hoyrs
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING - 48, TASKBAR_PADDING, time.hours / 10);
 8000672:	793b      	ldrb	r3, [r7, #4]
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <main+0x1f0>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f107 0110 	add.w	r1, r7, #16
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	230a      	movs	r3, #10
 8000686:	22b6      	movs	r2, #182	; 0xb6
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <main+0x1e8>)
 800068a:	f000 fb6f 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>
			lcdDriver.drawNumber(white, ILI9341_WIDTH - TASKBAR_PADDING - 56, TASKBAR_PADDING, time.hours % 10);
 800068e:	793a      	ldrb	r2, [r7, #4]
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <main+0x1f0>)
 8000692:	fba3 1302 	umull	r1, r3, r3, r2
 8000696:	08d9      	lsrs	r1, r3, #3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f107 0110 	add.w	r1, r7, #16
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	230a      	movs	r3, #10
 80006ac:	22ae      	movs	r2, #174	; 0xae
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <main+0x1e8>)
 80006b0:	f000 fb5c 	bl	8000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>

		}
	}
 80006b4:	e769      	b.n	800058a <main+0xba>
 80006b6:	bf00      	nop
 80006b8:	240000d4 	.word	0x240000d4
 80006bc:	24000000 	.word	0x24000000
 80006c0:	cccccccd 	.word	0xcccccccd
 80006c4:	24000010 	.word	0x24000010

080006c8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d11e      	bne.n	8000716 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006de:	4293      	cmp	r3, r2
 80006e0:	d119      	bne.n	8000716 <_Z41__static_initialization_and_destruction_0ii+0x4e>
static Hardware::SPI lcd_spi(SPI1), nrf24l01SPI(SPI2);
 80006e2:	490f      	ldr	r1, [pc, #60]	; (8000720 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80006e6:	f000 ff03 	bl	80014f0 <_ZN8Hardware3SPIC1EPV11SPI_TypeDef>
 80006ea:	490f      	ldr	r1, [pc, #60]	; (8000728 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80006ee:	f000 feff 	bl	80014f0 <_ZN8Hardware3SPIC1EPV11SPI_TypeDef>
static Drivers::ILI9341 lcdDriver(lcd_spi, LCD_GPIO, LCD_RESET, LCD_DC);
 80006f2:	2303      	movs	r3, #3
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2302      	movs	r3, #2
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80006fa:	490a      	ldr	r1, [pc, #40]	; (8000724 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80006fe:	f000 f9af 	bl	8000a60 <_ZN7Drivers7ILI9341C1ERN8Hardware3SPIEPV12GPIO_TypeDefhh>
		NRF24L01_GPIO, NRF24L01_CE);
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000704:	230b      	movs	r3, #11
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000712:	f000 fc8e 	bl	8001032 <_ZN7Drivers10NordicSemi8NRF24L01C1ENS0_17NRF24L01_Config_tERN8Hardware3SPIEPV12GPIO_TypeDefh>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40013000 	.word	0x40013000
 8000724:	240000cc 	.word	0x240000cc
 8000728:	40003800 	.word	0x40003800
 800072c:	240000d0 	.word	0x240000d0
 8000730:	58020000 	.word	0x58020000
 8000734:	240000d4 	.word	0x240000d4
 8000738:	24000008 	.word	0x24000008
 800073c:	58020400 	.word	0x58020400
 8000740:	240000e0 	.word	0x240000e0

08000744 <_GLOBAL__sub_I__Z5setupv>:
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
 8000748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff ffbb 	bl	80006c8 <_Z41__static_initialization_and_destruction_0ii>
 8000752:	bd80      	pop	{r7, pc}

08000754 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e00a      	b.n	800077c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000766:	f3af 8000 	nop.w
 800076a:	4601      	mov	r1, r0
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	dbf0      	blt.n	8000766 <_read+0x12>
	}

return len;
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e009      	b.n	80007b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fc99 	bl	80010e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbf1      	blt.n	80007a0 <_write+0x12>
	}
	return len;
 80007bc:	687b      	ldr	r3, [r7, #4]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_close>:

int _close(int file)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
	return -1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ee:	605a      	str	r2, [r3, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <_isatty>:

int _isatty(int file)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	return 1;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	return 0;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_Z11sysclk_initv>:

/**
 * Initializes the STM32H750XX System Clock to 480 Mhz, and the bus to 120 Mhz
 */
void sysclk_init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	// Configures flash
	//

	// Sets 2 flash wait states due to the BUS frequency of 120 Mhz

	FLASH->ACR &= FLASH_ACR_LATENCY;
 8000834:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <_Z11sysclk_initv+0x1b4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a6a      	ldr	r2, [pc, #424]	; (80009e4 <_Z11sysclk_initv+0x1b4>)
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8000840:	4b68      	ldr	r3, [pc, #416]	; (80009e4 <_Z11sysclk_initv+0x1b4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a67      	ldr	r2, [pc, #412]	; (80009e4 <_Z11sysclk_initv+0x1b4>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	6013      	str	r3, [r2, #0]
	//
	// Configures the actual clock
	//

	// Enables HSE
	RCC->CR |= RCC_CR_HSEON;
 800084c:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a65      	ldr	r2, [pc, #404]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000858:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d000      	beq.n	8000870 <_Z11sysclk_initv+0x40>
 800086e:	e7f3      	b.n	8000858 <_Z11sysclk_initv+0x28>

	// Sets the PLLSRC to HSE
	RCC->PLLCKSELR &= ~RCC_PLLCKSELR_PLLSRC;
 8000870:	4b5d      	ldr	r3, [pc, #372]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000874:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000876:	f023 0303 	bic.w	r3, r3, #3
 800087a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC->PLLCKSELR |= RCC_PLLCKSELR_PLLSRC_HSE;
 800087c:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	4a59      	ldr	r2, [pc, #356]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	6293      	str	r3, [r2, #40]	; 0x28

	// Configure PLL1
	RCC->PLLCKSELR &= ~RCC_PLLCKSELR_DIVM1;				// Clear DIVM1
 8000888:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	4a56      	ldr	r2, [pc, #344]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800088e:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000892:	6293      	str	r3, [r2, #40]	; 0x28
	RCC->PLLCKSELR |= (2 << RCC_PLLCKSELR_DIVM1_Pos);	// DIVM1: /2
 8000894:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	4a53      	ldr	r2, [pc, #332]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6293      	str	r3, [r2, #40]	; 0x28

	RCC->PLL1DIVR &= ~RCC_PLL1DIVR_N1;					// Clear DIVN1
 80008a0:	4b51      	ldr	r3, [pc, #324]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a4:	4950      	ldr	r1, [pc, #320]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008a6:	4b51      	ldr	r3, [pc, #324]	; (80009ec <_Z11sysclk_initv+0x1bc>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	630b      	str	r3, [r1, #48]	; 0x30
	RCC->PLL1DIVR |= (119 << RCC_PLL1DIVR_N1_Pos);		// DIVN1: 120 ( 119 because 0x000 is 1 )
 80008ac:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30

	RCC->PLL1DIVR &= ~RCC_PLL1DIVR_P1;					// Clear DIVP1
 80008b8:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a4a      	ldr	r2, [pc, #296]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008be:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->PLL1DIVR |= (1 << RCC_PLL1DIVR_P1_Pos);		// DIVP1: 2, 0b1 = CLK/2
 80008c4:	4b48      	ldr	r3, [pc, #288]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable PLL1Q Output ( For RNG ), and set DIV to 10, to get 48Mhz
	RCC->PLLCFGR |= RCC_PLLCFGR_DIVQ1EN;
 80008d0:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	4a44      	ldr	r2, [pc, #272]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->PLL1DIVR &= ~RCC_PLL1DIVR_Q1;
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a41      	ldr	r2, [pc, #260]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->PLL1DIVR |= (9 << RCC_PLL1DIVR_R1_Pos);		// 9 because 0b00 = 1
 80008e8:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a3e      	ldr	r2, [pc, #248]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008ee:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30

	// Configures HPRE
	RCC->D1CFGR &= RCC_D1CFGR_HPRE;						// Clear HPRE
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a3b      	ldr	r2, [pc, #236]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	6193      	str	r3, [r2, #24]
	RCC->D1CFGR |= RCC_D1CFGR_HPRE_DIV2;				// HPRE: /2
 8000900:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a38      	ldr	r2, [pc, #224]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6193      	str	r3, [r2, #24]

	// Enable PLL1
	RCC->CR |= RCC_CR_PLL1ON;
 800090c:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a35      	ldr	r2, [pc, #212]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000916:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLL1RDY));
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf0c      	ite	eq
 8000924:	2301      	moveq	r3, #1
 8000926:	2300      	movne	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d000      	beq.n	8000930 <_Z11sysclk_initv+0x100>
 800092e:	e7f3      	b.n	8000918 <_Z11sysclk_initv+0xe8>

	// Select PLL1 as main clock source
	RCC->CFGR |= RCC_CFGR_SW_PLL1;
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000936:	f043 0303 	orr.w	r3, r3, #3
 800093a:	6113      	str	r3, [r2, #16]
	while ((RCC->CFGR & RCC_CFGR_SW_Msk) != RCC_CFGR_SW_PLL1);
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	2b03      	cmp	r3, #3
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d000      	beq.n	8000954 <_Z11sysclk_initv+0x124>
 8000952:	e7f3      	b.n	800093c <_Z11sysclk_initv+0x10c>
	//
	// Configures backup domain
	//

	// Grant access to backup domain
	PWR->CR1 |= PWR_CR1_DBP;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <_Z11sysclk_initv+0x1c0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <_Z11sysclk_initv+0x1c0>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	6013      	str	r3, [r2, #0]

	// Checks if backup domain reset is required
	if ((RCC->BDCR & RCC_BDCR_RTCSEL) >> RCC_BDCR_RTCSEL_Pos != 0b01)
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b01      	cmp	r3, #1
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d011      	beq.n	800099c <_Z11sysclk_initv+0x16c>
	{
		// Resets backup domain
		RCC->BDCR |= RCC_BDCR_BDRST;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800097a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800097e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000982:	6713      	str	r3, [r2, #112]	; 0x70
		RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800098a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098e:	6713      	str	r3, [r2, #112]	; 0x70

		// Selects the clock source for the RTC
		RCC->BDCR |= (0b01 << RCC_BDCR_RTCSEL_Pos);
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099a:	6713      	str	r3, [r2, #112]	; 0x70
	}

	// Enables LSE
	RCC->BDCR |= RCC_BDCR_LSEON;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 800099e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009a0:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6713      	str	r3, [r2, #112]	; 0x70
	while (!(RCC->BDCR & RCC_BDCR_LSERDY));
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <_Z11sysclk_initv+0x190>
 80009be:	e7f3      	b.n	80009a8 <_Z11sysclk_initv+0x178>

	// Enables LSE Clock Security
	RCC->BDCR |= RCC_BDCR_LSECSSON;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009c6:	f043 0320 	orr.w	r3, r3, #32
 80009ca:	6713      	str	r3, [r2, #112]	; 0x70

	//
	// Configures the RTC
	//

	RCC->BDCR |= RCC_BDCR_RTCEN;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_Z11sysclk_initv+0x1b8>)
 80009d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d6:	6713      	str	r3, [r2, #112]	; 0x70
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	52002000 	.word	0x52002000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	fffffe00 	.word	0xfffffe00
 80009f0:	58024800 	.word	0x58024800

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f000 fe82 	bl	800172c <__errno>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24080000 	.word	0x24080000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	240000f4 	.word	0x240000f4
 8000a5c:	24000108 	.word	0x24000108

08000a60 <_ZN7Drivers7ILI9341C1ERN8Hardware3SPIEPV12GPIO_TypeDefhh>:

	/*----------------*
	 * Class stuff
	 *----------------*/

	ILI9341::ILI9341(Hardware::SPI &spi, volatile GPIO_TypeDef *gpio, u8 reset, u8 dc) noexcept:
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	70fb      	strb	r3, [r7, #3]
			m_SPI(spi),
			m_GPIO(gpio),
			m_Reset(reset),
			m_DC(dc)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	78fa      	ldrb	r2, [r7, #3]
 8000a7e:	721a      	strb	r2, [r3, #8]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	7e3a      	ldrb	r2, [r7, #24]
 8000a84:	725a      	strb	r2, [r3, #9]
	{}
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_ZN7Drivers7ILI93417commandEh>:
	/*----------------*
	 * Commands
	 *----------------*/

	void ILI9341::command(u8 command) noexcept
	{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
		m_SPI.start();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fdad 	bl	8001604 <_ZN8Hardware3SPI5startEv>

		m_GPIO->ODR &= ~_BV(m_DC);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	43db      	mvns	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	615a      	str	r2, [r3, #20]
		m_SPI.write8(command);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	78fa      	ldrb	r2, [r7, #3]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fde3 	bl	800169a <_ZN8Hardware3SPI6write8Eh>

		m_SPI.await();
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fdc7 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fda8 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZN7Drivers7ILI93414dataEh>:

	void ILI9341::data(u8 data)
	{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
		m_SPI.start();
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fd7f 	bl	8001604 <_ZN8Hardware3SPI5startEv>

		m_GPIO->ODR |= _BV(m_DC);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	4619      	mov	r1, r3
 8000b12:	2301      	movs	r3, #1
 8000b14:	408b      	lsls	r3, r1
 8000b16:	4619      	mov	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	615a      	str	r2, [r3, #20]
		m_SPI.write8(data);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	78fa      	ldrb	r2, [r7, #3]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fdb6 	bl	800169a <_ZN8Hardware3SPI6write8Eh>

		m_SPI.await();
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fd9a 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fd7b 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN7Drivers7ILI93414dataEtt>:

	void ILI9341::data(u16 data1, u16 data2)
	{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
		m_SPI.start();
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd50 	bl	8001604 <_ZN8Hardware3SPI5startEv>

		m_GPIO->ODR |= _BV(m_DC);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a5b      	ldrb	r3, [r3, #9]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2301      	movs	r3, #1
 8000b72:	408b      	lsls	r3, r1
 8000b74:	4619      	mov	r1, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	615a      	str	r2, [r3, #20]
		m_SPI.write8(static_cast<u8>(data1 >> 8));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	121b      	asrs	r3, r3, #8
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f000 fd85 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
		m_SPI.write8(static_cast<u8>(data1));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fd7d 	bl	800169a <_ZN8Hardware3SPI6write8Eh>

		m_SPI.write8(static_cast<u8>(data2 >> 8));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	883b      	ldrh	r3, [r7, #0]
 8000ba6:	121b      	asrs	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	4610      	mov	r0, r2
 8000bae:	f000 fd74 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
		m_SPI.write8(static_cast<u8>(data2));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	883a      	ldrh	r2, [r7, #0]
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fd6c 	bl	800169a <_ZN8Hardware3SPI6write8Eh>

		m_SPI.await();
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fd50 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fd31 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_ZN7Drivers7ILI93414dataEPhh>:

	void ILI9341::data(u8 *data, u8 cnt)
	{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71fb      	strb	r3, [r7, #7]
		m_SPI.start();
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fd07 	bl	8001604 <_ZN8Hardware3SPI5startEv>

		m_GPIO->ODR |= _BV(m_DC);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	7a5b      	ldrb	r3, [r3, #9]
 8000c00:	4619      	mov	r1, r3
 8000c02:	2301      	movs	r3, #1
 8000c04:	408b      	lsls	r3, r1
 8000c06:	4619      	mov	r1, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	615a      	str	r2, [r3, #20]

		for (u8 i = 0; i < cnt; ++i)
 8000c10:	2300      	movs	r3, #0
 8000c12:	75fb      	strb	r3, [r7, #23]
 8000c14:	7dfa      	ldrb	r2, [r7, #23]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d20c      	bcs.n	8000c36 <_ZN7Drivers7ILI93414dataEPhh+0x58>
			m_SPI.write8(data[i]);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f000 fd36 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
		for (u8 i = 0; i < cnt; ++i)
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	3301      	adds	r3, #1
 8000c32:	75fb      	strb	r3, [r7, #23]
 8000c34:	e7ee      	b.n	8000c14 <_ZN7Drivers7ILI93414dataEPhh+0x36>

		m_SPI.await();
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fd16 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fcf7 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_ZN7Drivers7ILI934113softwareResetEv>:
	/*----------------*
	 * Resets
	 *----------------*/

	void ILI9341::softwareReset(void) noexcept
	{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
		command(ILI9341_REG_CMD_SOFTWARE_RESET);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff19 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		Delay::ms(20);
 8000c62:	2014      	movs	r0, #20
 8000c64:	f7ff fb72 	bl	800034c <_ZN5Delay2msEm>
	}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_ZN7Drivers7ILI934113hardwareResetEv>:

	void ILI9341::hardwareReset(void) noexcept
	{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
		m_GPIO->ODR &= ~_BV(m_Reset);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7a1b      	ldrb	r3, [r3, #8]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2301      	movs	r3, #1
 8000c86:	408b      	lsls	r3, r1
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	400a      	ands	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
		Delay::ms(20);
 8000c94:	2014      	movs	r0, #20
 8000c96:	f7ff fb59 	bl	800034c <_ZN5Delay2msEm>
		m_GPIO->ODR |= _BV(m_Reset);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	695a      	ldr	r2, [r3, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7a1b      	ldrb	r3, [r3, #8]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	4619      	mov	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
		Delay::ms(20);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f7ff fb49 	bl	800034c <_ZN5Delay2msEm>
	}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <_ZN7Drivers7ILI93414initEv>:
	/*----------------*
	 * Initialization
	 *----------------*/

	void ILI9341::init(void) noexcept
	{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
		//
		// Resets ILI9341
		//

		// Performs hard reset
		hardwareReset();
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffcf 	bl	8000c70 <_ZN7Drivers7ILI934113hardwareResetEv>

		// Performs soft reset
		softwareReset();
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffbd 	bl	8000c52 <_ZN7Drivers7ILI934113softwareResetEv>

		//
		// AdaFruit default gamma
		//

		u8 posGammaCorrection[] = {
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <_ZN7Drivers7ILI93414initEv+0xa0>)
 8000cda:	f107 0418 	add.w	r4, r7, #24
 8000cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ce2:	8023      	strh	r3, [r4, #0]
 8000ce4:	3402      	adds	r4, #2
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	7023      	strb	r3, [r4, #0]
				0x4E, 0xF1, 0x37,
				0x07, 0x10, 0x03,
				0x0E, 0x09, 0x00
		};

		u8 negGammaCorrection[] = {
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <_ZN7Drivers7ILI93414initEv+0xa4>)
 8000cec:	f107 0408 	add.w	r4, r7, #8
 8000cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf2:	c407      	stmia	r4!, {r0, r1, r2}
 8000cf4:	8023      	strh	r3, [r4, #0]
 8000cf6:	3402      	adds	r4, #2
 8000cf8:	0c1b      	lsrs	r3, r3, #16
 8000cfa:	7023      	strb	r3, [r4, #0]
				0x08, 0x0F, 0x0C,
				0x31, 0x36, 0x0F
		};

		// Gamma set
		ILI9341::command(ILI9341_REG_CMD_GAMMA_SET);
 8000cfc:	2126      	movs	r1, #38	; 0x26
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fec8 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		ILI9341::data(0x01);
 8000d04:	2101      	movs	r1, #1
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fef2 	bl	8000af0 <_ZN7Drivers7ILI93414dataEh>

		// Positive gamma correction
		ILI9341::command(ILI9341_EXT_CMD_POSITIVE_GAMMA_COR);
 8000d0c:	21e0      	movs	r1, #224	; 0xe0
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fec0 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		ILI9341::data(posGammaCorrection, sizeof (posGammaCorrection) / sizeof (u8));
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	220f      	movs	r2, #15
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff5e 	bl	8000bde <_ZN7Drivers7ILI93414dataEPhh>

		// Negative gamma correction
		ILI9341::command(ILI9341_EXT_CMD_NEGATIVE_GAMMA_COR);
 8000d22:	21e1      	movs	r1, #225	; 0xe1
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff feb5 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		ILI9341::data(negGammaCorrection, sizeof (negGammaCorrection) / sizeof (u8));
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	220f      	movs	r2, #15
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff53 	bl	8000bde <_ZN7Drivers7ILI93414dataEPhh>
		//
		// Enable ILI9341
		//

		// Sleep out
		ILI9341::command(ILI9341_REG_CMD_SLEEP_OUT);
 8000d38:	2111      	movs	r1, #17
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff feaa 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		Delay::ms(20);
 8000d40:	2014      	movs	r0, #20
 8000d42:	f7ff fb03 	bl	800034c <_ZN5Delay2msEm>

		// Display on
		ILI9341::command(ILI9341_REG_CMD_DISPLAY_ON);
 8000d46:	2129      	movs	r1, #41	; 0x29
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fea3 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		Delay::ms(20);
 8000d4e:	2014      	movs	r0, #20
 8000d50:	f7ff fafc 	bl	800034c <_ZN5Delay2msEm>

		// Normal mode
		ILI9341::command(ILI9341_REG_CMD_NORMAL_DISPLAY_MODE_ON);
 8000d54:	2113      	movs	r1, #19
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fe9c 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
	}
 8000d5c:	bf00      	nop
 8000d5e:	372c      	adds	r7, #44	; 0x2c
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	08002084 	.word	0x08002084
 8000d68:	08002094 	.word	0x08002094

08000d6c <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth>:
	/*----------------*
	 * Drawing
	 *----------------*/

	void ILI9341::drawNumber(const ILI9341_Color_t &color, u16 x, u16 y, u8 n)
	{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80bb      	strh	r3, [r7, #4]
		if (n > 9) return;
 8000d82:	7e3b      	ldrb	r3, [r7, #24]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d810      	bhi.n	8000daa <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth+0x3e>

		ILI9341::drawBitmap(color, number_bitmap[n], x, y, 5);
 8000d88:	7e3a      	ldrb	r2, [r7, #24]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth+0x48>)
 8000d92:	441a      	add	r2, r3
 8000d94:	88f9      	ldrh	r1, [r7, #6]
 8000d96:	2305      	movs	r3, #5
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f847 	bl	8000e36 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth>
 8000da8:	e000      	b.n	8000dac <_ZN7Drivers7ILI934110drawNumberERKNS_15ILI9341_Color_tEtth+0x40>
		if (n > 9) return;
 8000daa:	bf00      	nop
	}
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000018 	.word	0x24000018

08000db8 <_ZN7Drivers7ILI93419drawPixelERKNS_15ILI9341_Color_tEtt>:

	void ILI9341::drawPixel(const ILI9341_Color_t &color, u16 x, u16 y)
	{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	80bb      	strh	r3, [r7, #4]
		//
		// Sets the position
		//

		// Sets the X and Y
		setColumnAddress(x, x);
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f869 	bl	8000eac <_ZN7Drivers7ILI934116setColumnAddressEtt>
		setRowAddress(y, y);
 8000dda:	88ba      	ldrh	r2, [r7, #4]
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 f879 	bl	8000ed8 <_ZN7Drivers7ILI934113setRowAddressEtt>

		// Sends the write command
		command(ILI9341_REG_CMD_MEMORY_WRITE);
 8000de6:	212c      	movs	r1, #44	; 0x2c
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff fe53 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>

		//
		// Sends the pixel
		//

		m_SPI.start();
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fc06 	bl	8001604 <_ZN8Hardware3SPI5startEv>
		m_GPIO->ODR |= _BV(m_DC);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	7a5b      	ldrb	r3, [r3, #9]
 8000e02:	4619      	mov	r1, r3
 8000e04:	2301      	movs	r3, #1
 8000e06:	408b      	lsls	r3, r1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	615a      	str	r2, [r3, #20]

		writePixel(color);
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f000 f875 	bl	8000f04 <_ZN7Drivers7ILI934110writePixelERKNS_15ILI9341_Color_tE>

		m_SPI.await();
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fc24 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fc05 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth>:

	void ILI9341::drawBitmap(const ILI9341_Color_t &color, u8 *bitmap, u16 sx, u16 sy, u8 cnt)
	{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	807b      	strh	r3, [r7, #2]
		for (u8 bmp_row = 0; bmp_row < cnt; ++bmp_row)
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	7dfa      	ldrb	r2, [r7, #23]
 8000e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d228      	bcs.n	8000ea4 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth+0x6e>
		{
			u8 bmp_row_v = bitmap[bmp_row];
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	75bb      	strb	r3, [r7, #22]

			for (u8 bmp_col = 0; bmp_col < 8; ++bmp_col)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	757b      	strb	r3, [r7, #21]
 8000e60:	7d7b      	ldrb	r3, [r7, #21]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d81a      	bhi.n	8000e9c <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth+0x66>
			{
				if (bmp_row_v & 1)
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00e      	beq.n	8000e8e <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth+0x58>
					drawPixel(color, sx + bmp_col, sy + bmp_row);
 8000e70:	7d7b      	ldrb	r3, [r7, #21]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	4413      	add	r3, r2
 8000e78:	b299      	uxth	r1, r3
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	8c3b      	ldrh	r3, [r7, #32]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	460a      	mov	r2, r1
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff ff95 	bl	8000db8 <_ZN7Drivers7ILI93419drawPixelERKNS_15ILI9341_Color_tEtt>

				bmp_row_v >>= 1;
 8000e8e:	7dbb      	ldrb	r3, [r7, #22]
 8000e90:	105b      	asrs	r3, r3, #1
 8000e92:	75bb      	strb	r3, [r7, #22]
			for (u8 bmp_col = 0; bmp_col < 8; ++bmp_col)
 8000e94:	7d7b      	ldrb	r3, [r7, #21]
 8000e96:	3301      	adds	r3, #1
 8000e98:	757b      	strb	r3, [r7, #21]
 8000e9a:	e7e1      	b.n	8000e60 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth+0x2a>
		for (u8 bmp_row = 0; bmp_row < cnt; ++bmp_row)
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	e7d1      	b.n	8000e48 <_ZN7Drivers7ILI934110drawBitmapERKNS_15ILI9341_Color_tEPhtth+0x12>
			}
		}
	}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN7Drivers7ILI934116setColumnAddressEtt>:
	/*----------------*
	 * Operations
	 *----------------*/

	void ILI9341::setColumnAddress(u16 sx, u16 ex) noexcept
	{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	803b      	strh	r3, [r7, #0]
		ILI9341::command(ILI9341_REG_CMD_COLUMN_ADDRESS_SET);
 8000ebc:	212a      	movs	r1, #42	; 0x2a
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fde8 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		ILI9341::data(sx, ex);
 8000ec4:	883a      	ldrh	r2, [r7, #0]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fe3d 	bl	8000b4a <_ZN7Drivers7ILI93414dataEtt>
	}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZN7Drivers7ILI934113setRowAddressEtt>:

	void ILI9341::setRowAddress(u16 sy, u16 ey) noexcept
	{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	803b      	strh	r3, [r7, #0]
		ILI9341::command(ILI9341_REG_CMD_PAGE_ADDRESS_SET);
 8000ee8:	212b      	movs	r1, #43	; 0x2b
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fdd2 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>
		ILI9341::data(sy, ey);
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fe27 	bl	8000b4a <_ZN7Drivers7ILI93414dataEtt>
	}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZN7Drivers7ILI934110writePixelERKNS_15ILI9341_Color_tE>:

	void ILI9341::writePixel(const ILI9341_Color_t &color) noexcept
	{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
		m_SPI.write8(color.blue << 2);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f3c3 3305 	ubfx	r3, r3, #12, #6
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f000 fbb9 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
		m_SPI.write8(color.green << 2);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f3c3 1385 	ubfx	r3, r3, #6, #6
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f000 fbac 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
		m_SPI.write8(color.red << 2);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	4610      	mov	r0, r2
 8000f58:	f000 fb9f 	bl	800169a <_ZN8Hardware3SPI6write8Eh>
	}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt>:

	void ILI9341::drawSquare(const ILI9341_Color_t &color, u16 sx, u16 ex, u16 sy, u16 ey)
	{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	460b      	mov	r3, r1
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
		//
		// Sets the addresses
		//

		setColumnAddress(sx, ex);
 8000f7a:	88ba      	ldrh	r2, [r7, #4]
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ff93 	bl	8000eac <_ZN7Drivers7ILI934116setColumnAddressEtt>
		setRowAddress(sy, ey);
 8000f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f88:	8c3b      	ldrh	r3, [r7, #32]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff ffa3 	bl	8000ed8 <_ZN7Drivers7ILI934113setRowAddressEtt>

		//
		// Writes the square
		//

		command(ILI9341_REG_CMD_MEMORY_WRITE);
 8000f92:	212c      	movs	r1, #44	; 0x2c
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fd7d 	bl	8000a94 <_ZN7Drivers7ILI93417commandEh>

		m_SPI.start();
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb30 	bl	8001604 <_ZN8Hardware3SPI5startEv>
		m_GPIO->ODR |= _BV(m_DC);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	408b      	lsls	r3, r1
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	615a      	str	r2, [r3, #20]
		for (u16 x = sx; x <= ex; ++x)
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	82fb      	strh	r3, [r7, #22]
 8000fc2:	8afa      	ldrh	r2, [r7, #22]
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d811      	bhi.n	8000fee <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt+0x8a>
		{
			for (u16 y = sy; y <= ey; ++y)
 8000fca:	8c3b      	ldrh	r3, [r7, #32]
 8000fcc:	82bb      	strh	r3, [r7, #20]
 8000fce:	8aba      	ldrh	r2, [r7, #20]
 8000fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d807      	bhi.n	8000fe6 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt+0x82>
			{
				writePixel(color);
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ff93 	bl	8000f04 <_ZN7Drivers7ILI934110writePixelERKNS_15ILI9341_Color_tE>
			for (u16 y = sy; y <= ey; ++y)
 8000fde:	8abb      	ldrh	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	82bb      	strh	r3, [r7, #20]
 8000fe4:	e7f3      	b.n	8000fce <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt+0x6a>
		for (u16 x = sx; x <= ex; ++x)
 8000fe6:	8afb      	ldrh	r3, [r7, #22]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	82fb      	strh	r3, [r7, #22]
 8000fec:	e7e9      	b.n	8000fc2 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt+0x5e>
			}
		}

		m_SPI.await();
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb3a 	bl	800166c <_ZN8Hardware3SPI5awaitEv>
		m_SPI.stop();
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fb1b 	bl	8001638 <_ZN8Hardware3SPI4stopEv>
	}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZN7Drivers7ILI93415clearERKNS_15ILI9341_Color_tE>:

	void ILI9341::clear(const ILI9341_Color_t &color) noexcept
	{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af02      	add	r7, sp, #8
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
		ILI9341::drawSquare(color, 0, ILI9341_WIDTH, 0, ILI9341_HEIGHT);
 8001014:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	2300      	movs	r3, #0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	23f0      	movs	r3, #240	; 0xf0
 8001020:	2200      	movs	r2, #0
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff9d 	bl	8000f64 <_ZN7Drivers7ILI934110drawSquareERKNS_15ILI9341_Color_tEtttt>
	}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_ZN7Drivers10NordicSemi8NRF24L01C1ENS0_17NRF24L01_Config_tERN8Hardware3SPIEPV12GPIO_TypeDefh>:
#include "drivers/nrf24l01.h"

namespace Drivers::NordicSemi
{
	NRF24L01::NRF24L01(NRF24L01_Config_t config, SPI &spi, volatile GPIO_TypeDef *gpio, u8 ce) noexcept :
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	1d38      	adds	r0, r7, #4
 800103c:	e880 0006 	stmia.w	r0, {r1, r2}
 8001040:	603b      	str	r3, [r7, #0]
			m_Config(config), m_SPI(spi), m_GPIO(gpio), m_CE(ce)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	461a      	mov	r2, r3
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	e893 0003 	ldmia.w	r3, {r0, r1}
 800104c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	7f3a      	ldrb	r2, [r7, #28]
 8001060:	741a      	strb	r2, [r3, #16]
	{}
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_ZN8Hardware21RandomNumberGenerator4initEv>:
{
	/**
	 * Initializes the True Random Number Generator
	 */
	void RandomNumberGenerator::init(void)
	{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
		// Selects RNG clock source
		RCC->D2CCIP2R |= RCC_D2CCIP2R_RNGSEL_0;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <_ZN8Hardware21RandomNumberGenerator4initEv+0x2c>)
 8001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001078:	4a08      	ldr	r2, [pc, #32]	; (800109c <_ZN8Hardware21RandomNumberGenerator4initEv+0x2c>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6553      	str	r3, [r2, #84]	; 0x54

		// Enables clock for RNG
		RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <_ZN8Hardware21RandomNumberGenerator4initEv+0x2c>)
 8001082:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_ZN8Hardware21RandomNumberGenerator4initEv+0x2c>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	58024400 	.word	0x58024400

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0d      	blt.n	80010ce <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x3c>)
 80010be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__io_putchar>:
#include <hardware/rs232.h>

extern "C" int __io_putchar(int ch)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	Hardware::RS232::write(static_cast<char>(ch));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f827 	bl	8001140 <_ZN8Hardware5RS2325writeEc>
	return ch;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN8Hardware5RS2324initEm>:

namespace Hardware
{
	#define RS232_BUS_CLK (120 * 1000000)
	void RS232::init(u32 baud) noexcept
	{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
		// Calculate & Set BAUD rate
		USART1->BRR = (((2 * RS232_BUS_CLK) + baud) / (2 * baud));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <_ZN8Hardware5RS2324initEm+0x3c>)
 8001108:	4413      	add	r3, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	490b      	ldr	r1, [pc, #44]	; (800113c <_ZN8Hardware5RS2324initEm+0x40>)
 8001110:	fbb3 f3f2 	udiv	r3, r3, r2
 8001114:	60cb      	str	r3, [r1, #12]

		// Enable RX interrupt, and enable USART1 in NVIC
		USART1->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <_ZN8Hardware5RS2324initEm+0x40>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <_ZN8Hardware5RS2324initEm+0x40>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6013      	str	r3, [r2, #0]
		NVIC_EnableIRQ(USART1_IRQn);
 8001122:	2025      	movs	r0, #37	; 0x25
 8001124:	f7ff ffbc 	bl	80010a0 <__NVIC_EnableIRQ>

		// Enable USART1
		USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <_ZN8Hardware5RS2324initEm+0x40>)
 800112a:	2209      	movs	r2, #9
 800112c:	601a      	str	r2, [r3, #0]
	}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	0e4e1c00 	.word	0x0e4e1c00
 800113c:	40011000 	.word	0x40011000

08001140 <_ZN8Hardware5RS2325writeEc>:

	void RS232::write(char c) noexcept
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
		if (c == '\n')
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b0a      	cmp	r3, #10
 800114e:	d102      	bne.n	8001156 <_ZN8Hardware5RS2325writeEc+0x16>
			RS232::write('\r');
 8001150:	200d      	movs	r0, #13
 8001152:	f7ff fff5 	bl	8001140 <_ZN8Hardware5RS2325writeEc>

		// Write the char
		USART1->TDR = static_cast<u32>(c);
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <_ZN8Hardware5RS2325writeEc+0x3c>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!(USART1->ISR & USART_ISR_TC));
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <_ZN8Hardware5RS2325writeEc+0x3c>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d000      	beq.n	8001174 <_ZN8Hardware5RS2325writeEc+0x34>
 8001172:	e7f3      	b.n	800115c <_ZN8Hardware5RS2325writeEc+0x1c>
	}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40011000 	.word	0x40011000

08001180 <_ZN8Hardware9RTCDriver6unlockEv>:
#include "hardware/rtc.h"

namespace Hardware
{
	void RTCDriver::unlock(void) noexcept
	{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
		// Unlock RTC by writing key
		RTC->WPR = 0xCA;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <_ZN8Hardware9RTCDriver6unlockEv+0x1c>)
 8001186:	22ca      	movs	r2, #202	; 0xca
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
		RTC->WPR = 0x53;
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <_ZN8Hardware9RTCDriver6unlockEv+0x1c>)
 800118c:	2253      	movs	r2, #83	; 0x53
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	58004000 	.word	0x58004000

080011a0 <_ZN8Hardware9RTCDriver4lockEv>:

	void RTCDriver::lock(void) noexcept
	{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
		RTC->WPR = 0xFF;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <_ZN8Hardware9RTCDriver4lockEv+0x14>)
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	58004000 	.word	0x58004000

080011b8 <_ZN8Hardware9RTCDriver4initEv>:

	void RTCDriver::init(void) noexcept
	{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
		unlock();
 80011bc:	f7ff ffe0 	bl	8001180 <_ZN8Hardware9RTCDriver6unlockEv>

		//
		// Configures the prescalar
		//

		RTC->PRER &= ~(RTC_PRER_PREDIV_A | RTC_PRER_PREDIV_S);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	4918      	ldr	r1, [pc, #96]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <_ZN8Hardware9RTCDriver4initEv+0x74>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	610b      	str	r3, [r1, #16]
		RTC->PRER |= (127 << RTC_PRER_PREDIV_A_Pos) | (255 << RTC_PRER_PREDIV_S_Pos);
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	4915      	ldr	r1, [pc, #84]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <_ZN8Hardware9RTCDriver4initEv+0x78>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	610b      	str	r3, [r1, #16]

		//
		// Initialization mode
		//

		RTC->ISR |= RTC_ISR_INIT;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e2:	60d3      	str	r3, [r2, #12]
		while (!(RTC->ISR & RTC_ISR_INITF));
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d000      	beq.n	80011fc <_ZN8Hardware9RTCDriver4initEv+0x44>
 80011fa:	e7f3      	b.n	80011e4 <_ZN8Hardware9RTCDriver4initEv+0x2c>

		setTime(0, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f87f 	bl	8001304 <_ZN8Hardware9RTCDriver7setTimeEhhh>
		setDate(20, 1, 1, RTC_MONDAY);
 8001206:	2301      	movs	r3, #1
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	2014      	movs	r0, #20
 800120e:	f000 f8ed 	bl	80013ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE>

		RTC->ISR &= ~RTC_ISR_INIT;
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <_ZN8Hardware9RTCDriver4initEv+0x70>)
 8001218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800121c:	60d3      	str	r3, [r2, #12]

		//
		// Finishes
		//

		lock();
 800121e:	f7ff ffbf 	bl	80011a0 <_ZN8Hardware9RTCDriver4lockEv>
	}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	58004000 	.word	0x58004000
 800122c:	ff808000 	.word	0xff808000
 8001230:	007f00ff 	.word	0x007f00ff

08001234 <_ZN8Hardware9RTCDriver7getTimeEv>:
				.date = getDate()
		};
	}

	RTC_Time_t RTCDriver::getTime(void) noexcept
	{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
		RTC_Time_t time;

		time.hours = (RTC->TR & RTC_TR_HT) >> RTC_TR_HT_Pos;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0d1b      	lsrs	r3, r3, #20
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	703b      	strb	r3, [r7, #0]
		time.hours *= 10;
 800124a:	783b      	ldrb	r3, [r7, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	703b      	strb	r3, [r7, #0]
		time.hours += (RTC->TR & RTC_TR_HU) >> RTC_TR_HU_Pos;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	783a      	ldrb	r2, [r7, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4413      	add	r3, r2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	703b      	strb	r3, [r7, #0]

		time.minutes = (RTC->TR & RTC_TR_MNT) >> RTC_TR_MNT_Pos;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0b1b      	lsrs	r3, r3, #12
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b2db      	uxtb	r3, r3
 800127a:	707b      	strb	r3, [r7, #1]
		time.minutes *= 10;
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	461a      	mov	r2, r3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	707b      	strb	r3, [r7, #1]
		time.minutes += (RTC->TR & RTC_TR_MNU) >> RTC_TR_MNU_Pos;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	787a      	ldrb	r2, [r7, #1]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	707b      	strb	r3, [r7, #1]

		time.seconds = (RTC->TR & RTC_TR_ST) >> RTC_TR_ST_Pos;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	70bb      	strb	r3, [r7, #2]
		time.seconds *= 10;
 80012ae:	78bb      	ldrb	r3, [r7, #2]
 80012b0:	461a      	mov	r2, r3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	70bb      	strb	r3, [r7, #2]
		time.seconds += (RTC->TR & RTC_TR_SU) >> RTC_TR_SU_Pos;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_ZN8Hardware9RTCDriver7getTimeEv+0xcc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	78ba      	ldrb	r2, [r7, #2]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	70bb      	strb	r3, [r7, #2]

		return time;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	463a      	mov	r2, r7
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4611      	mov	r1, r2
 80012d6:	8019      	strh	r1, [r3, #0]
 80012d8:	3302      	adds	r3, #2
 80012da:	0c12      	lsrs	r2, r2, #16
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	793a      	ldrb	r2, [r7, #4]
 80012e2:	f362 0307 	bfi	r3, r2, #0, #8
 80012e6:	797a      	ldrb	r2, [r7, #5]
 80012e8:	f362 230f 	bfi	r3, r2, #8, #8
 80012ec:	79ba      	ldrb	r2, [r7, #6]
 80012ee:	f362 4317 	bfi	r3, r2, #16, #8
	}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	58004000 	.word	0x58004000

08001304 <_ZN8Hardware9RTCDriver7setTimeEhhh>:

	void RTCDriver::setTime(u8 hour, u8 minute, u8 seconds)
	{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	460b      	mov	r3, r1
 8001310:	71bb      	strb	r3, [r7, #6]
 8001312:	4613      	mov	r3, r2
 8001314:	717b      	strb	r3, [r7, #5]
		RTC->TR &= ~(RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU |
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4931      	ldr	r1, [pc, #196]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe0>)
 800131e:	4013      	ands	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
				RTC_TR_ST | RTC_TR_SU | RTC_TR_PM);

		RTC->TR |= ((hour / 10) << RTC_TR_HT_Pos);
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	492f      	ldr	r1, [pc, #188]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 800132a:	fba1 1202 	umull	r1, r2, r1, r2
 800132e:	08d2      	lsrs	r2, r2, #3
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	0512      	lsls	r2, r2, #20
 8001334:	4611      	mov	r1, r2
 8001336:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001338:	430b      	orrs	r3, r1
 800133a:	6013      	str	r3, [r2, #0]
		RTC->TR |= ((hour % 10) << RTC_TR_HU_Pos);
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 8001344:	fba3 1302 	umull	r1, r3, r3, r2
 8001348:	08d9      	lsrs	r1, r3, #3
 800134a:	460b      	mov	r3, r1
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 800135a:	4303      	orrs	r3, r0
 800135c:	6013      	str	r3, [r2, #0]

		RTC->TR |= ((minute / 10) << RTC_TR_MNT_Pos);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	4920      	ldr	r1, [pc, #128]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 8001366:	fba1 1202 	umull	r1, r2, r1, r2
 800136a:	08d2      	lsrs	r2, r2, #3
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	0312      	lsls	r2, r2, #12
 8001370:	4611      	mov	r1, r2
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001374:	430b      	orrs	r3, r1
 8001376:	6013      	str	r3, [r2, #0]
		RTC->TR |= ((minute % 10) << RTC_TR_MNU_Pos);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	79ba      	ldrb	r2, [r7, #6]
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 8001380:	fba3 1302 	umull	r1, r3, r3, r2
 8001384:	08d9      	lsrs	r1, r3, #3
 8001386:	460b      	mov	r3, r1
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 8001396:	4303      	orrs	r3, r0
 8001398:	6013      	str	r3, [r2, #0]

		RTC->TR |= ((seconds / 10) << RTC_TR_ST_Pos);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	797a      	ldrb	r2, [r7, #5]
 80013a0:	4911      	ldr	r1, [pc, #68]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 80013a2:	fba1 1202 	umull	r1, r2, r1, r2
 80013a6:	08d2      	lsrs	r2, r2, #3
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	4611      	mov	r1, r2
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6013      	str	r3, [r2, #0]
		RTC->TR |= ((seconds % 10) << RTC_TR_SU_Pos);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	797a      	ldrb	r2, [r7, #5]
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xe4>)
 80013bc:	fba3 1302 	umull	r1, r3, r3, r2
 80013c0:	08d9      	lsrs	r1, r3, #3
 80013c2:	460b      	mov	r3, r1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <_ZN8Hardware9RTCDriver7setTimeEhhh+0xdc>)
 80013d0:	4303      	orrs	r3, r0
 80013d2:	6013      	str	r3, [r2, #0]
	}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	58004000 	.word	0x58004000
 80013e4:	ff808080 	.word	0xff808080
 80013e8:	cccccccd 	.word	0xcccccccd

080013ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE>:

		return date;
	}

	void RTCDriver::setDate(u8 year, u8 month, u8 date, RTC_WeekDay_t weekday) noexcept
	{
 80013ec:	b490      	push	{r4, r7}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	4603      	mov	r3, r0
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	460b      	mov	r3, r1
 8001404:	717b      	strb	r3, [r7, #5]
 8001406:	4613      	mov	r3, r2
 8001408:	713b      	strb	r3, [r7, #4]
		RTC->DR &= ~(RTC_DR_YT | RTC_DR_YU | RTC_DR_WDU | RTC_DR_MT |
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4935      	ldr	r1, [pc, #212]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001410:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xfc>)
 8001412:	4013      	ands	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
				RTC_DR_MU | RTC_DR_DT | RTC_DR_DU);

		RTC->DR |= ((weekday & 0x7) << RTC_DR_WDU_Pos);
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	793b      	ldrb	r3, [r7, #4]
 800141c:	035b      	lsls	r3, r3, #13
 800141e:	b29b      	uxth	r3, r3
 8001420:	4930      	ldr	r1, [pc, #192]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]

		RTC->DR |= ((year / 10) << RTC_DR_YT_Pos);
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	492f      	ldr	r1, [pc, #188]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 800142e:	fba1 1202 	umull	r1, r2, r1, r2
 8001432:	08d2      	lsrs	r2, r2, #3
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	0512      	lsls	r2, r2, #20
 8001438:	4611      	mov	r1, r2
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 800143c:	430b      	orrs	r3, r1
 800143e:	6053      	str	r3, [r2, #4]
		RTC->DR |= ((year % 10) << RTC_DR_YU_Pos);
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001442:	6858      	ldr	r0, [r3, #4]
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 8001448:	fba3 1302 	umull	r1, r3, r3, r2
 800144c:	08d9      	lsrs	r1, r3, #3
 800144e:	460b      	mov	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 800145e:	4303      	orrs	r3, r0
 8001460:	6053      	str	r3, [r2, #4]

		RTC->DR |= ((month / 10) << RTC_DR_MT_Pos);
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	4920      	ldr	r1, [pc, #128]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 800146a:	fba1 1202 	umull	r1, r2, r1, r2
 800146e:	08d2      	lsrs	r2, r2, #3
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	0312      	lsls	r2, r2, #12
 8001474:	4611      	mov	r1, r2
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 8001478:	430b      	orrs	r3, r1
 800147a:	6053      	str	r3, [r2, #4]
		RTC->DR |= ((month % 10) << RTC_DR_MU_Pos);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 800147e:	6858      	ldr	r0, [r3, #4]
 8001480:	79ba      	ldrb	r2, [r7, #6]
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 8001484:	fba3 1302 	umull	r1, r3, r3, r2
 8001488:	08d9      	lsrs	r1, r3, #3
 800148a:	460b      	mov	r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 800149a:	4303      	orrs	r3, r0
 800149c:	6053      	str	r3, [r2, #4]

		RTC->DR |= ((date / 10) << RTC_DR_DT_Pos);
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	797a      	ldrb	r2, [r7, #5]
 80014a4:	4911      	ldr	r1, [pc, #68]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 80014a6:	fba1 1202 	umull	r1, r2, r1, r2
 80014aa:	08d2      	lsrs	r2, r2, #3
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	4611      	mov	r1, r2
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6053      	str	r3, [r2, #4]
		RTC->DR |= ((date % 10) << RTC_DR_DU_Pos);
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 80014ba:	6858      	ldr	r0, [r3, #4]
 80014bc:	797a      	ldrb	r2, [r7, #5]
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0x100>)
 80014c0:	fba3 1302 	umull	r1, r3, r3, r2
 80014c4:	08d9      	lsrs	r1, r3, #3
 80014c6:	460b      	mov	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <_ZN8Hardware9RTCDriver7setDateEhhhNS_13RTC_WeekDay_tE+0xf8>)
 80014d4:	4303      	orrs	r3, r0
 80014d6:	6053      	str	r3, [r2, #4]
	}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc90      	pop	{r4, r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	58004000 	.word	0x58004000
 80014e8:	ff0000c0 	.word	0xff0000c0
 80014ec:	cccccccd 	.word	0xcccccccd

080014f0 <_ZN8Hardware3SPIC1EPV11SPI_TypeDef>:
#include "hardware/spi.h"

namespace Hardware
{
	SPI::SPI(volatile SPI_TypeDef *spi) noexcept:
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
			m_SPI(spi)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	601a      	str	r2, [r3, #0]
	{}
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_ZN8Hardware3SPI4initEv>:

	void SPI::init(void) noexcept
	{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
		//
		// Configure Procedure
		//

		// Sets the master BAUD Rate
		m_SPI->CFG1 &= ~SPI_CFG1_MBR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8001526:	609a      	str	r2, [r3, #8]
		m_SPI->CFG1 |= (0b101 << SPI_CFG1_MBR_Pos);		// clock / 64
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 8001536:	609a      	str	r2, [r3, #8]

		// Slave select pin master mode
		m_SPI->CFG2 |= SPI_CFG2_SSOE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001546:	60da      	str	r2, [r3, #12]

		// Master InterFrame idleness
		m_SPI->CFG2 &= ~SPI_CFG2_MIDI;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001556:	60da      	str	r2, [r3, #12]
		m_SPI->CFG2 |= (4 << SPI_CFG2_MIDI_Pos);		// 4 Clock-Cycle delay between frames
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001566:	60da      	str	r2, [r3, #12]

		// Master SlaveSelect idleness
		m_SPI->CFG2 &= ~SPI_CFG2_MSSI;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020f 	bic.w	r2, r2, #15
 8001576:	60da      	str	r2, [r3, #12]
		m_SPI->CFG2 |= (0 << SPI_CFG2_MSSI_Pos);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	60da      	str	r2, [r3, #12]

		// Transmit sequence size
		m_SPI->CR2 &= ~SPI_CR2_TSIZE;					// Size not known
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <_ZN8Hardware3SPI4initEv+0xf0>)
 8001590:	400b      	ands	r3, r1
 8001592:	6053      	str	r3, [r2, #4]

		// Number of bits in a single data frame
		m_SPI->CFG1 &= ~SPI_CFG1_DSIZE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 021f 	bic.w	r2, r2, #31
 80015a2:	609a      	str	r2, [r3, #8]
		m_SPI->CFG1 |= (0b00111 << SPI_CFG1_DSIZE_Pos);	// 8-bits
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0207 	orr.w	r2, r2, #7
 80015b2:	609a      	str	r2, [r3, #8]

		// Number of data frames at single data packet
		m_SPI->CFG1 &= ~SPI_CFG1_FTHLV;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80015c2:	609a      	str	r2, [r3, #8]
		m_SPI->CFG1 |= (0b0010 << SPI_CFG1_FTHLV_Pos);	// 2-data ( 16-bit )
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d2:	609a      	str	r2, [r3, #8]
		//
		// Enable Procedure
		//

		// Enable master
		m_SPI->CFG2 |= SPI_CFG2_MASTER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80015e2:	60da      	str	r2, [r3, #12]

		// Enable SPI1
		m_SPI->CR1 |= SPI_CR1_SPE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
	}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	ffff0000 	.word	0xffff0000

08001604 <_ZN8Hardware3SPI5startEv>:

	void SPI::start(void) noexcept
	{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
		m_SPI->CR1 |= SPI_CR1_SPE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
		m_SPI->CR1 |= SPI_CR1_CSTART;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162a:	601a      	str	r2, [r3, #0]
	}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZN8Hardware3SPI4stopEv>:

	void SPI::stop(void) noexcept
	{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
		m_SPI->CR1 |= SPI_CR1_CSUSP;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800164e:	601a      	str	r2, [r3, #0]
		m_SPI->CR1 &= ~SPI_CR1_SPE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
	}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_ZN8Hardware3SPI5awaitEv>:

	void SPI::await(void) noexcept
	{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
		while (!(m_SPI->SR & SPI_SR_TXC));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d000      	beq.n	800168e <_ZN8Hardware3SPI5awaitEv+0x22>
 800168c:	e7f2      	b.n	8001674 <_ZN8Hardware3SPI5awaitEv+0x8>
	}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_ZN8Hardware3SPI6write8Eh>:

	void SPI::write8(u8 b) noexcept
	{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
		while (!(m_SPI->SR & SPI_SR_TXP));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d000      	beq.n	80016c0 <_ZN8Hardware3SPI6write8Eh+0x26>
 80016be:	e7f2      	b.n	80016a6 <_ZN8Hardware3SPI6write8Eh+0xc>
		*(reinterpret_cast<volatile u8 *>(&m_SPI->TXDR)) = b;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3320      	adds	r3, #32
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	701a      	strb	r2, [r3, #0]
	}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001706:	f000 f817 	bl	8001738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170a:	f7fe fee1 	bl	80004d0 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   r0, =_estack
 8001710:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001714:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001718:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 800171c:	08002114 	.word	0x08002114
  ldr r2, =_sbss
 8001720:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8001724:	24000104 	.word	0x24000104

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>
	...

0800172c <__errno>:
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <__errno+0x8>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2400004c 	.word	0x2400004c

08001738 <__libc_init_array>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	4e0d      	ldr	r6, [pc, #52]	; (8001770 <__libc_init_array+0x38>)
 800173c:	4c0d      	ldr	r4, [pc, #52]	; (8001774 <__libc_init_array+0x3c>)
 800173e:	1ba4      	subs	r4, r4, r6
 8001740:	10a4      	asrs	r4, r4, #2
 8001742:	2500      	movs	r5, #0
 8001744:	42a5      	cmp	r5, r4
 8001746:	d109      	bne.n	800175c <__libc_init_array+0x24>
 8001748:	4e0b      	ldr	r6, [pc, #44]	; (8001778 <__libc_init_array+0x40>)
 800174a:	4c0c      	ldr	r4, [pc, #48]	; (800177c <__libc_init_array+0x44>)
 800174c:	f000 fc88 	bl	8002060 <_init>
 8001750:	1ba4      	subs	r4, r4, r6
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	2500      	movs	r5, #0
 8001756:	42a5      	cmp	r5, r4
 8001758:	d105      	bne.n	8001766 <__libc_init_array+0x2e>
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001760:	4798      	blx	r3
 8001762:	3501      	adds	r5, #1
 8001764:	e7ee      	b.n	8001744 <__libc_init_array+0xc>
 8001766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800176a:	4798      	blx	r3
 800176c:	3501      	adds	r5, #1
 800176e:	e7f2      	b.n	8001756 <__libc_init_array+0x1e>
 8001770:	08002108 	.word	0x08002108
 8001774:	08002108 	.word	0x08002108
 8001778:	08002108 	.word	0x08002108
 800177c:	08002110 	.word	0x08002110

08001780 <memset>:
 8001780:	4402      	add	r2, r0
 8001782:	4603      	mov	r3, r0
 8001784:	4293      	cmp	r3, r2
 8001786:	d100      	bne.n	800178a <memset+0xa>
 8001788:	4770      	bx	lr
 800178a:	f803 1b01 	strb.w	r1, [r3], #1
 800178e:	e7f9      	b.n	8001784 <memset+0x4>

08001790 <_puts_r>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	460e      	mov	r6, r1
 8001794:	4605      	mov	r5, r0
 8001796:	b118      	cbz	r0, 80017a0 <_puts_r+0x10>
 8001798:	6983      	ldr	r3, [r0, #24]
 800179a:	b90b      	cbnz	r3, 80017a0 <_puts_r+0x10>
 800179c:	f000 fa0c 	bl	8001bb8 <__sinit>
 80017a0:	69ab      	ldr	r3, [r5, #24]
 80017a2:	68ac      	ldr	r4, [r5, #8]
 80017a4:	b913      	cbnz	r3, 80017ac <_puts_r+0x1c>
 80017a6:	4628      	mov	r0, r5
 80017a8:	f000 fa06 	bl	8001bb8 <__sinit>
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <_puts_r+0xac>)
 80017ae:	429c      	cmp	r4, r3
 80017b0:	d117      	bne.n	80017e2 <_puts_r+0x52>
 80017b2:	686c      	ldr	r4, [r5, #4]
 80017b4:	89a3      	ldrh	r3, [r4, #12]
 80017b6:	071b      	lsls	r3, r3, #28
 80017b8:	d51d      	bpl.n	80017f6 <_puts_r+0x66>
 80017ba:	6923      	ldr	r3, [r4, #16]
 80017bc:	b1db      	cbz	r3, 80017f6 <_puts_r+0x66>
 80017be:	3e01      	subs	r6, #1
 80017c0:	68a3      	ldr	r3, [r4, #8]
 80017c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60a3      	str	r3, [r4, #8]
 80017ca:	b9e9      	cbnz	r1, 8001808 <_puts_r+0x78>
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da2e      	bge.n	800182e <_puts_r+0x9e>
 80017d0:	4622      	mov	r2, r4
 80017d2:	210a      	movs	r1, #10
 80017d4:	4628      	mov	r0, r5
 80017d6:	f000 f83f 	bl	8001858 <__swbuf_r>
 80017da:	3001      	adds	r0, #1
 80017dc:	d011      	beq.n	8001802 <_puts_r+0x72>
 80017de:	200a      	movs	r0, #10
 80017e0:	e011      	b.n	8001806 <_puts_r+0x76>
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <_puts_r+0xb0>)
 80017e4:	429c      	cmp	r4, r3
 80017e6:	d101      	bne.n	80017ec <_puts_r+0x5c>
 80017e8:	68ac      	ldr	r4, [r5, #8]
 80017ea:	e7e3      	b.n	80017b4 <_puts_r+0x24>
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_puts_r+0xb4>)
 80017ee:	429c      	cmp	r4, r3
 80017f0:	bf08      	it	eq
 80017f2:	68ec      	ldreq	r4, [r5, #12]
 80017f4:	e7de      	b.n	80017b4 <_puts_r+0x24>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4628      	mov	r0, r5
 80017fa:	f000 f87f 	bl	80018fc <__swsetup_r>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d0dd      	beq.n	80017be <_puts_r+0x2e>
 8001802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	2b00      	cmp	r3, #0
 800180a:	da04      	bge.n	8001816 <_puts_r+0x86>
 800180c:	69a2      	ldr	r2, [r4, #24]
 800180e:	429a      	cmp	r2, r3
 8001810:	dc06      	bgt.n	8001820 <_puts_r+0x90>
 8001812:	290a      	cmp	r1, #10
 8001814:	d004      	beq.n	8001820 <_puts_r+0x90>
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	6022      	str	r2, [r4, #0]
 800181c:	7019      	strb	r1, [r3, #0]
 800181e:	e7cf      	b.n	80017c0 <_puts_r+0x30>
 8001820:	4622      	mov	r2, r4
 8001822:	4628      	mov	r0, r5
 8001824:	f000 f818 	bl	8001858 <__swbuf_r>
 8001828:	3001      	adds	r0, #1
 800182a:	d1c9      	bne.n	80017c0 <_puts_r+0x30>
 800182c:	e7e9      	b.n	8001802 <_puts_r+0x72>
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	200a      	movs	r0, #10
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	6022      	str	r2, [r4, #0]
 8001836:	7018      	strb	r0, [r3, #0]
 8001838:	e7e5      	b.n	8001806 <_puts_r+0x76>
 800183a:	bf00      	nop
 800183c:	080020c8 	.word	0x080020c8
 8001840:	080020e8 	.word	0x080020e8
 8001844:	080020a8 	.word	0x080020a8

08001848 <puts>:
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <puts+0xc>)
 800184a:	4601      	mov	r1, r0
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	f7ff bf9f 	b.w	8001790 <_puts_r>
 8001852:	bf00      	nop
 8001854:	2400004c 	.word	0x2400004c

08001858 <__swbuf_r>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	460e      	mov	r6, r1
 800185c:	4614      	mov	r4, r2
 800185e:	4605      	mov	r5, r0
 8001860:	b118      	cbz	r0, 800186a <__swbuf_r+0x12>
 8001862:	6983      	ldr	r3, [r0, #24]
 8001864:	b90b      	cbnz	r3, 800186a <__swbuf_r+0x12>
 8001866:	f000 f9a7 	bl	8001bb8 <__sinit>
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <__swbuf_r+0x98>)
 800186c:	429c      	cmp	r4, r3
 800186e:	d12a      	bne.n	80018c6 <__swbuf_r+0x6e>
 8001870:	686c      	ldr	r4, [r5, #4]
 8001872:	69a3      	ldr	r3, [r4, #24]
 8001874:	60a3      	str	r3, [r4, #8]
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	071a      	lsls	r2, r3, #28
 800187a:	d52e      	bpl.n	80018da <__swbuf_r+0x82>
 800187c:	6923      	ldr	r3, [r4, #16]
 800187e:	b363      	cbz	r3, 80018da <__swbuf_r+0x82>
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	6820      	ldr	r0, [r4, #0]
 8001884:	1ac0      	subs	r0, r0, r3
 8001886:	6963      	ldr	r3, [r4, #20]
 8001888:	b2f6      	uxtb	r6, r6
 800188a:	4283      	cmp	r3, r0
 800188c:	4637      	mov	r7, r6
 800188e:	dc04      	bgt.n	800189a <__swbuf_r+0x42>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f926 	bl	8001ae4 <_fflush_r>
 8001898:	bb28      	cbnz	r0, 80018e6 <__swbuf_r+0x8e>
 800189a:	68a3      	ldr	r3, [r4, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60a3      	str	r3, [r4, #8]
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	6022      	str	r2, [r4, #0]
 80018a6:	701e      	strb	r6, [r3, #0]
 80018a8:	6963      	ldr	r3, [r4, #20]
 80018aa:	3001      	adds	r0, #1
 80018ac:	4283      	cmp	r3, r0
 80018ae:	d004      	beq.n	80018ba <__swbuf_r+0x62>
 80018b0:	89a3      	ldrh	r3, [r4, #12]
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d519      	bpl.n	80018ea <__swbuf_r+0x92>
 80018b6:	2e0a      	cmp	r6, #10
 80018b8:	d117      	bne.n	80018ea <__swbuf_r+0x92>
 80018ba:	4621      	mov	r1, r4
 80018bc:	4628      	mov	r0, r5
 80018be:	f000 f911 	bl	8001ae4 <_fflush_r>
 80018c2:	b190      	cbz	r0, 80018ea <__swbuf_r+0x92>
 80018c4:	e00f      	b.n	80018e6 <__swbuf_r+0x8e>
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <__swbuf_r+0x9c>)
 80018c8:	429c      	cmp	r4, r3
 80018ca:	d101      	bne.n	80018d0 <__swbuf_r+0x78>
 80018cc:	68ac      	ldr	r4, [r5, #8]
 80018ce:	e7d0      	b.n	8001872 <__swbuf_r+0x1a>
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <__swbuf_r+0xa0>)
 80018d2:	429c      	cmp	r4, r3
 80018d4:	bf08      	it	eq
 80018d6:	68ec      	ldreq	r4, [r5, #12]
 80018d8:	e7cb      	b.n	8001872 <__swbuf_r+0x1a>
 80018da:	4621      	mov	r1, r4
 80018dc:	4628      	mov	r0, r5
 80018de:	f000 f80d 	bl	80018fc <__swsetup_r>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d0cc      	beq.n	8001880 <__swbuf_r+0x28>
 80018e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018ea:	4638      	mov	r0, r7
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	080020c8 	.word	0x080020c8
 80018f4:	080020e8 	.word	0x080020e8
 80018f8:	080020a8 	.word	0x080020a8

080018fc <__swsetup_r>:
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <__swsetup_r+0xcc>)
 80018fe:	b570      	push	{r4, r5, r6, lr}
 8001900:	681d      	ldr	r5, [r3, #0]
 8001902:	4606      	mov	r6, r0
 8001904:	460c      	mov	r4, r1
 8001906:	b125      	cbz	r5, 8001912 <__swsetup_r+0x16>
 8001908:	69ab      	ldr	r3, [r5, #24]
 800190a:	b913      	cbnz	r3, 8001912 <__swsetup_r+0x16>
 800190c:	4628      	mov	r0, r5
 800190e:	f000 f953 	bl	8001bb8 <__sinit>
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <__swsetup_r+0xd0>)
 8001914:	429c      	cmp	r4, r3
 8001916:	d10f      	bne.n	8001938 <__swsetup_r+0x3c>
 8001918:	686c      	ldr	r4, [r5, #4]
 800191a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800191e:	b29a      	uxth	r2, r3
 8001920:	0715      	lsls	r5, r2, #28
 8001922:	d42c      	bmi.n	800197e <__swsetup_r+0x82>
 8001924:	06d0      	lsls	r0, r2, #27
 8001926:	d411      	bmi.n	800194c <__swsetup_r+0x50>
 8001928:	2209      	movs	r2, #9
 800192a:	6032      	str	r2, [r6, #0]
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001936:	e03e      	b.n	80019b6 <__swsetup_r+0xba>
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <__swsetup_r+0xd4>)
 800193a:	429c      	cmp	r4, r3
 800193c:	d101      	bne.n	8001942 <__swsetup_r+0x46>
 800193e:	68ac      	ldr	r4, [r5, #8]
 8001940:	e7eb      	b.n	800191a <__swsetup_r+0x1e>
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <__swsetup_r+0xd8>)
 8001944:	429c      	cmp	r4, r3
 8001946:	bf08      	it	eq
 8001948:	68ec      	ldreq	r4, [r5, #12]
 800194a:	e7e6      	b.n	800191a <__swsetup_r+0x1e>
 800194c:	0751      	lsls	r1, r2, #29
 800194e:	d512      	bpl.n	8001976 <__swsetup_r+0x7a>
 8001950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001952:	b141      	cbz	r1, 8001966 <__swsetup_r+0x6a>
 8001954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001958:	4299      	cmp	r1, r3
 800195a:	d002      	beq.n	8001962 <__swsetup_r+0x66>
 800195c:	4630      	mov	r0, r6
 800195e:	f000 fa19 	bl	8001d94 <_free_r>
 8001962:	2300      	movs	r3, #0
 8001964:	6363      	str	r3, [r4, #52]	; 0x34
 8001966:	89a3      	ldrh	r3, [r4, #12]
 8001968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	2300      	movs	r3, #0
 8001970:	6063      	str	r3, [r4, #4]
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	81a3      	strh	r3, [r4, #12]
 800197e:	6923      	ldr	r3, [r4, #16]
 8001980:	b94b      	cbnz	r3, 8001996 <__swsetup_r+0x9a>
 8001982:	89a3      	ldrh	r3, [r4, #12]
 8001984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198c:	d003      	beq.n	8001996 <__swsetup_r+0x9a>
 800198e:	4621      	mov	r1, r4
 8001990:	4630      	mov	r0, r6
 8001992:	f000 f9bf 	bl	8001d14 <__smakebuf_r>
 8001996:	89a2      	ldrh	r2, [r4, #12]
 8001998:	f012 0301 	ands.w	r3, r2, #1
 800199c:	d00c      	beq.n	80019b8 <__swsetup_r+0xbc>
 800199e:	2300      	movs	r3, #0
 80019a0:	60a3      	str	r3, [r4, #8]
 80019a2:	6963      	ldr	r3, [r4, #20]
 80019a4:	425b      	negs	r3, r3
 80019a6:	61a3      	str	r3, [r4, #24]
 80019a8:	6923      	ldr	r3, [r4, #16]
 80019aa:	b953      	cbnz	r3, 80019c2 <__swsetup_r+0xc6>
 80019ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80019b4:	d1ba      	bne.n	800192c <__swsetup_r+0x30>
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	0792      	lsls	r2, r2, #30
 80019ba:	bf58      	it	pl
 80019bc:	6963      	ldrpl	r3, [r4, #20]
 80019be:	60a3      	str	r3, [r4, #8]
 80019c0:	e7f2      	b.n	80019a8 <__swsetup_r+0xac>
 80019c2:	2000      	movs	r0, #0
 80019c4:	e7f7      	b.n	80019b6 <__swsetup_r+0xba>
 80019c6:	bf00      	nop
 80019c8:	2400004c 	.word	0x2400004c
 80019cc:	080020c8 	.word	0x080020c8
 80019d0:	080020e8 	.word	0x080020e8
 80019d4:	080020a8 	.word	0x080020a8

080019d8 <__sflush_r>:
 80019d8:	898a      	ldrh	r2, [r1, #12]
 80019da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019de:	4605      	mov	r5, r0
 80019e0:	0710      	lsls	r0, r2, #28
 80019e2:	460c      	mov	r4, r1
 80019e4:	d458      	bmi.n	8001a98 <__sflush_r+0xc0>
 80019e6:	684b      	ldr	r3, [r1, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dc05      	bgt.n	80019f8 <__sflush_r+0x20>
 80019ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc02      	bgt.n	80019f8 <__sflush_r+0x20>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019fa:	2e00      	cmp	r6, #0
 80019fc:	d0f9      	beq.n	80019f2 <__sflush_r+0x1a>
 80019fe:	2300      	movs	r3, #0
 8001a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a04:	682f      	ldr	r7, [r5, #0]
 8001a06:	6a21      	ldr	r1, [r4, #32]
 8001a08:	602b      	str	r3, [r5, #0]
 8001a0a:	d032      	beq.n	8001a72 <__sflush_r+0x9a>
 8001a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a0e:	89a3      	ldrh	r3, [r4, #12]
 8001a10:	075a      	lsls	r2, r3, #29
 8001a12:	d505      	bpl.n	8001a20 <__sflush_r+0x48>
 8001a14:	6863      	ldr	r3, [r4, #4]
 8001a16:	1ac0      	subs	r0, r0, r3
 8001a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a1a:	b10b      	cbz	r3, 8001a20 <__sflush_r+0x48>
 8001a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1e:	1ac0      	subs	r0, r0, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4602      	mov	r2, r0
 8001a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a26:	6a21      	ldr	r1, [r4, #32]
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	1c43      	adds	r3, r0, #1
 8001a2e:	89a3      	ldrh	r3, [r4, #12]
 8001a30:	d106      	bne.n	8001a40 <__sflush_r+0x68>
 8001a32:	6829      	ldr	r1, [r5, #0]
 8001a34:	291d      	cmp	r1, #29
 8001a36:	d848      	bhi.n	8001aca <__sflush_r+0xf2>
 8001a38:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <__sflush_r+0x108>)
 8001a3a:	40ca      	lsrs	r2, r1
 8001a3c:	07d6      	lsls	r6, r2, #31
 8001a3e:	d544      	bpl.n	8001aca <__sflush_r+0xf2>
 8001a40:	2200      	movs	r2, #0
 8001a42:	6062      	str	r2, [r4, #4]
 8001a44:	04d9      	lsls	r1, r3, #19
 8001a46:	6922      	ldr	r2, [r4, #16]
 8001a48:	6022      	str	r2, [r4, #0]
 8001a4a:	d504      	bpl.n	8001a56 <__sflush_r+0x7e>
 8001a4c:	1c42      	adds	r2, r0, #1
 8001a4e:	d101      	bne.n	8001a54 <__sflush_r+0x7c>
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	b903      	cbnz	r3, 8001a56 <__sflush_r+0x7e>
 8001a54:	6560      	str	r0, [r4, #84]	; 0x54
 8001a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a58:	602f      	str	r7, [r5, #0]
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d0c9      	beq.n	80019f2 <__sflush_r+0x1a>
 8001a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a62:	4299      	cmp	r1, r3
 8001a64:	d002      	beq.n	8001a6c <__sflush_r+0x94>
 8001a66:	4628      	mov	r0, r5
 8001a68:	f000 f994 	bl	8001d94 <_free_r>
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8001a70:	e7c0      	b.n	80019f4 <__sflush_r+0x1c>
 8001a72:	2301      	movs	r3, #1
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	1c41      	adds	r1, r0, #1
 8001a7a:	d1c8      	bne.n	8001a0e <__sflush_r+0x36>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0c5      	beq.n	8001a0e <__sflush_r+0x36>
 8001a82:	2b1d      	cmp	r3, #29
 8001a84:	d001      	beq.n	8001a8a <__sflush_r+0xb2>
 8001a86:	2b16      	cmp	r3, #22
 8001a88:	d101      	bne.n	8001a8e <__sflush_r+0xb6>
 8001a8a:	602f      	str	r7, [r5, #0]
 8001a8c:	e7b1      	b.n	80019f2 <__sflush_r+0x1a>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a94:	81a3      	strh	r3, [r4, #12]
 8001a96:	e7ad      	b.n	80019f4 <__sflush_r+0x1c>
 8001a98:	690f      	ldr	r7, [r1, #16]
 8001a9a:	2f00      	cmp	r7, #0
 8001a9c:	d0a9      	beq.n	80019f2 <__sflush_r+0x1a>
 8001a9e:	0793      	lsls	r3, r2, #30
 8001aa0:	680e      	ldr	r6, [r1, #0]
 8001aa2:	bf08      	it	eq
 8001aa4:	694b      	ldreq	r3, [r1, #20]
 8001aa6:	600f      	str	r7, [r1, #0]
 8001aa8:	bf18      	it	ne
 8001aaa:	2300      	movne	r3, #0
 8001aac:	eba6 0807 	sub.w	r8, r6, r7
 8001ab0:	608b      	str	r3, [r1, #8]
 8001ab2:	f1b8 0f00 	cmp.w	r8, #0
 8001ab6:	dd9c      	ble.n	80019f2 <__sflush_r+0x1a>
 8001ab8:	4643      	mov	r3, r8
 8001aba:	463a      	mov	r2, r7
 8001abc:	6a21      	ldr	r1, [r4, #32]
 8001abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	47b0      	blx	r6
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	dc06      	bgt.n	8001ad6 <__sflush_r+0xfe>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ace:	81a3      	strh	r3, [r4, #12]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad4:	e78e      	b.n	80019f4 <__sflush_r+0x1c>
 8001ad6:	4407      	add	r7, r0
 8001ad8:	eba8 0800 	sub.w	r8, r8, r0
 8001adc:	e7e9      	b.n	8001ab2 <__sflush_r+0xda>
 8001ade:	bf00      	nop
 8001ae0:	20400001 	.word	0x20400001

08001ae4 <_fflush_r>:
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	690b      	ldr	r3, [r1, #16]
 8001ae8:	4605      	mov	r5, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	b1db      	cbz	r3, 8001b26 <_fflush_r+0x42>
 8001aee:	b118      	cbz	r0, 8001af8 <_fflush_r+0x14>
 8001af0:	6983      	ldr	r3, [r0, #24]
 8001af2:	b90b      	cbnz	r3, 8001af8 <_fflush_r+0x14>
 8001af4:	f000 f860 	bl	8001bb8 <__sinit>
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <_fflush_r+0x48>)
 8001afa:	429c      	cmp	r4, r3
 8001afc:	d109      	bne.n	8001b12 <_fflush_r+0x2e>
 8001afe:	686c      	ldr	r4, [r5, #4]
 8001b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b04:	b17b      	cbz	r3, 8001b26 <_fflush_r+0x42>
 8001b06:	4621      	mov	r1, r4
 8001b08:	4628      	mov	r0, r5
 8001b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b0e:	f7ff bf63 	b.w	80019d8 <__sflush_r>
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_fflush_r+0x4c>)
 8001b14:	429c      	cmp	r4, r3
 8001b16:	d101      	bne.n	8001b1c <_fflush_r+0x38>
 8001b18:	68ac      	ldr	r4, [r5, #8]
 8001b1a:	e7f1      	b.n	8001b00 <_fflush_r+0x1c>
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <_fflush_r+0x50>)
 8001b1e:	429c      	cmp	r4, r3
 8001b20:	bf08      	it	eq
 8001b22:	68ec      	ldreq	r4, [r5, #12]
 8001b24:	e7ec      	b.n	8001b00 <_fflush_r+0x1c>
 8001b26:	2000      	movs	r0, #0
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	080020c8 	.word	0x080020c8
 8001b30:	080020e8 	.word	0x080020e8
 8001b34:	080020a8 	.word	0x080020a8

08001b38 <std>:
 8001b38:	2300      	movs	r3, #0
 8001b3a:	b510      	push	{r4, lr}
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8001b42:	6083      	str	r3, [r0, #8]
 8001b44:	8181      	strh	r1, [r0, #12]
 8001b46:	6643      	str	r3, [r0, #100]	; 0x64
 8001b48:	81c2      	strh	r2, [r0, #14]
 8001b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b4e:	6183      	str	r3, [r0, #24]
 8001b50:	4619      	mov	r1, r3
 8001b52:	2208      	movs	r2, #8
 8001b54:	305c      	adds	r0, #92	; 0x5c
 8001b56:	f7ff fe13 	bl	8001780 <memset>
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <std+0x38>)
 8001b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <std+0x3c>)
 8001b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <std+0x40>)
 8001b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <std+0x44>)
 8001b68:	6224      	str	r4, [r4, #32]
 8001b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	08001f05 	.word	0x08001f05
 8001b74:	08001f27 	.word	0x08001f27
 8001b78:	08001f5f 	.word	0x08001f5f
 8001b7c:	08001f83 	.word	0x08001f83

08001b80 <_cleanup_r>:
 8001b80:	4901      	ldr	r1, [pc, #4]	; (8001b88 <_cleanup_r+0x8>)
 8001b82:	f000 b885 	b.w	8001c90 <_fwalk_reent>
 8001b86:	bf00      	nop
 8001b88:	08001ae5 	.word	0x08001ae5

08001b8c <__sfmoreglue>:
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	1e4a      	subs	r2, r1, #1
 8001b90:	2568      	movs	r5, #104	; 0x68
 8001b92:	4355      	muls	r5, r2
 8001b94:	460e      	mov	r6, r1
 8001b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b9a:	f000 f949 	bl	8001e30 <_malloc_r>
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	b140      	cbz	r0, 8001bb4 <__sfmoreglue+0x28>
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8001ba8:	300c      	adds	r0, #12
 8001baa:	60a0      	str	r0, [r4, #8]
 8001bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bb0:	f7ff fde6 	bl	8001780 <memset>
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}

08001bb8 <__sinit>:
 8001bb8:	6983      	ldr	r3, [r0, #24]
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	bb33      	cbnz	r3, 8001c0e <__sinit+0x56>
 8001bc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001bc4:	6503      	str	r3, [r0, #80]	; 0x50
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <__sinit+0x58>)
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <__sinit+0x5c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6282      	str	r2, [r0, #40]	; 0x28
 8001bce:	4298      	cmp	r0, r3
 8001bd0:	bf04      	itt	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	6183      	streq	r3, [r0, #24]
 8001bd6:	f000 f81f 	bl	8001c18 <__sfp>
 8001bda:	6060      	str	r0, [r4, #4]
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 f81b 	bl	8001c18 <__sfp>
 8001be2:	60a0      	str	r0, [r4, #8]
 8001be4:	4620      	mov	r0, r4
 8001be6:	f000 f817 	bl	8001c18 <__sfp>
 8001bea:	2200      	movs	r2, #0
 8001bec:	60e0      	str	r0, [r4, #12]
 8001bee:	2104      	movs	r1, #4
 8001bf0:	6860      	ldr	r0, [r4, #4]
 8001bf2:	f7ff ffa1 	bl	8001b38 <std>
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2109      	movs	r1, #9
 8001bfa:	68a0      	ldr	r0, [r4, #8]
 8001bfc:	f7ff ff9c 	bl	8001b38 <std>
 8001c00:	2202      	movs	r2, #2
 8001c02:	2112      	movs	r1, #18
 8001c04:	68e0      	ldr	r0, [r4, #12]
 8001c06:	f7ff ff97 	bl	8001b38 <std>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61a3      	str	r3, [r4, #24]
 8001c0e:	bd10      	pop	{r4, pc}
 8001c10:	080020a4 	.word	0x080020a4
 8001c14:	08001b81 	.word	0x08001b81

08001c18 <__sfp>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <__sfp+0x70>)
 8001c1c:	681e      	ldr	r6, [r3, #0]
 8001c1e:	69b3      	ldr	r3, [r6, #24]
 8001c20:	4607      	mov	r7, r0
 8001c22:	b913      	cbnz	r3, 8001c2a <__sfp+0x12>
 8001c24:	4630      	mov	r0, r6
 8001c26:	f7ff ffc7 	bl	8001bb8 <__sinit>
 8001c2a:	3648      	adds	r6, #72	; 0x48
 8001c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	d503      	bpl.n	8001c3c <__sfp+0x24>
 8001c34:	6833      	ldr	r3, [r6, #0]
 8001c36:	b133      	cbz	r3, 8001c46 <__sfp+0x2e>
 8001c38:	6836      	ldr	r6, [r6, #0]
 8001c3a:	e7f7      	b.n	8001c2c <__sfp+0x14>
 8001c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c40:	b16d      	cbz	r5, 8001c5e <__sfp+0x46>
 8001c42:	3468      	adds	r4, #104	; 0x68
 8001c44:	e7f4      	b.n	8001c30 <__sfp+0x18>
 8001c46:	2104      	movs	r1, #4
 8001c48:	4638      	mov	r0, r7
 8001c4a:	f7ff ff9f 	bl	8001b8c <__sfmoreglue>
 8001c4e:	6030      	str	r0, [r6, #0]
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d1f1      	bne.n	8001c38 <__sfp+0x20>
 8001c54:	230c      	movs	r3, #12
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4604      	mov	r4, r0
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <__sfp+0x74>)
 8001c60:	6665      	str	r5, [r4, #100]	; 0x64
 8001c62:	e9c4 5500 	strd	r5, r5, [r4]
 8001c66:	60a5      	str	r5, [r4, #8]
 8001c68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c70:	2208      	movs	r2, #8
 8001c72:	4629      	mov	r1, r5
 8001c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c78:	f7ff fd82 	bl	8001780 <memset>
 8001c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c84:	e7e9      	b.n	8001c5a <__sfp+0x42>
 8001c86:	bf00      	nop
 8001c88:	080020a4 	.word	0x080020a4
 8001c8c:	ffff0001 	.word	0xffff0001

08001c90 <_fwalk_reent>:
 8001c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c94:	4680      	mov	r8, r0
 8001c96:	4689      	mov	r9, r1
 8001c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c9c:	2600      	movs	r6, #0
 8001c9e:	b914      	cbnz	r4, 8001ca6 <_fwalk_reent+0x16>
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001caa:	3f01      	subs	r7, #1
 8001cac:	d501      	bpl.n	8001cb2 <_fwalk_reent+0x22>
 8001cae:	6824      	ldr	r4, [r4, #0]
 8001cb0:	e7f5      	b.n	8001c9e <_fwalk_reent+0xe>
 8001cb2:	89ab      	ldrh	r3, [r5, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d907      	bls.n	8001cc8 <_fwalk_reent+0x38>
 8001cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	d003      	beq.n	8001cc8 <_fwalk_reent+0x38>
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	47c8      	blx	r9
 8001cc6:	4306      	orrs	r6, r0
 8001cc8:	3568      	adds	r5, #104	; 0x68
 8001cca:	e7ee      	b.n	8001caa <_fwalk_reent+0x1a>

08001ccc <__swhatbuf_r>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	460e      	mov	r6, r1
 8001cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	b096      	sub	sp, #88	; 0x58
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	da07      	bge.n	8001cee <__swhatbuf_r+0x22>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	602b      	str	r3, [r5, #0]
 8001ce2:	89b3      	ldrh	r3, [r6, #12]
 8001ce4:	061a      	lsls	r2, r3, #24
 8001ce6:	d410      	bmi.n	8001d0a <__swhatbuf_r+0x3e>
 8001ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cec:	e00e      	b.n	8001d0c <__swhatbuf_r+0x40>
 8001cee:	466a      	mov	r2, sp
 8001cf0:	f000 f96e 	bl	8001fd0 <_fstat_r>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	dbf2      	blt.n	8001cde <__swhatbuf_r+0x12>
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001cfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d02:	425a      	negs	r2, r3
 8001d04:	415a      	adcs	r2, r3
 8001d06:	602a      	str	r2, [r5, #0]
 8001d08:	e7ee      	b.n	8001ce8 <__swhatbuf_r+0x1c>
 8001d0a:	2340      	movs	r3, #64	; 0x40
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	b016      	add	sp, #88	; 0x58
 8001d12:	bd70      	pop	{r4, r5, r6, pc}

08001d14 <__smakebuf_r>:
 8001d14:	898b      	ldrh	r3, [r1, #12]
 8001d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d18:	079d      	lsls	r5, r3, #30
 8001d1a:	4606      	mov	r6, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	d507      	bpl.n	8001d30 <__smakebuf_r+0x1c>
 8001d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	6123      	str	r3, [r4, #16]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	6163      	str	r3, [r4, #20]
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	ab01      	add	r3, sp, #4
 8001d32:	466a      	mov	r2, sp
 8001d34:	f7ff ffca 	bl	8001ccc <__swhatbuf_r>
 8001d38:	9900      	ldr	r1, [sp, #0]
 8001d3a:	4605      	mov	r5, r0
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f000 f877 	bl	8001e30 <_malloc_r>
 8001d42:	b948      	cbnz	r0, 8001d58 <__smakebuf_r+0x44>
 8001d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d48:	059a      	lsls	r2, r3, #22
 8001d4a:	d4ef      	bmi.n	8001d2c <__smakebuf_r+0x18>
 8001d4c:	f023 0303 	bic.w	r3, r3, #3
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	81a3      	strh	r3, [r4, #12]
 8001d56:	e7e3      	b.n	8001d20 <__smakebuf_r+0xc>
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <__smakebuf_r+0x7c>)
 8001d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	6020      	str	r0, [r4, #0]
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	9b00      	ldr	r3, [sp, #0]
 8001d68:	6163      	str	r3, [r4, #20]
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	6120      	str	r0, [r4, #16]
 8001d6e:	b15b      	cbz	r3, 8001d88 <__smakebuf_r+0x74>
 8001d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 f93d 	bl	8001ff4 <_isatty_r>
 8001d7a:	b128      	cbz	r0, 8001d88 <__smakebuf_r+0x74>
 8001d7c:	89a3      	ldrh	r3, [r4, #12]
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	81a3      	strh	r3, [r4, #12]
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	431d      	orrs	r5, r3
 8001d8c:	81a5      	strh	r5, [r4, #12]
 8001d8e:	e7cd      	b.n	8001d2c <__smakebuf_r+0x18>
 8001d90:	08001b81 	.word	0x08001b81

08001d94 <_free_r>:
 8001d94:	b538      	push	{r3, r4, r5, lr}
 8001d96:	4605      	mov	r5, r0
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d045      	beq.n	8001e28 <_free_r+0x94>
 8001d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001da0:	1f0c      	subs	r4, r1, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bfb8      	it	lt
 8001da6:	18e4      	addlt	r4, r4, r3
 8001da8:	f000 f946 	bl	8002038 <__malloc_lock>
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <_free_r+0x98>)
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	4610      	mov	r0, r2
 8001db2:	b933      	cbnz	r3, 8001dc2 <_free_r+0x2e>
 8001db4:	6063      	str	r3, [r4, #4]
 8001db6:	6014      	str	r4, [r2, #0]
 8001db8:	4628      	mov	r0, r5
 8001dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dbe:	f000 b93c 	b.w	800203a <__malloc_unlock>
 8001dc2:	42a3      	cmp	r3, r4
 8001dc4:	d90c      	bls.n	8001de0 <_free_r+0x4c>
 8001dc6:	6821      	ldr	r1, [r4, #0]
 8001dc8:	1862      	adds	r2, r4, r1
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	bf04      	itt	eq
 8001dce:	681a      	ldreq	r2, [r3, #0]
 8001dd0:	685b      	ldreq	r3, [r3, #4]
 8001dd2:	6063      	str	r3, [r4, #4]
 8001dd4:	bf04      	itt	eq
 8001dd6:	1852      	addeq	r2, r2, r1
 8001dd8:	6022      	streq	r2, [r4, #0]
 8001dda:	6004      	str	r4, [r0, #0]
 8001ddc:	e7ec      	b.n	8001db8 <_free_r+0x24>
 8001dde:	4613      	mov	r3, r2
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	b10a      	cbz	r2, 8001de8 <_free_r+0x54>
 8001de4:	42a2      	cmp	r2, r4
 8001de6:	d9fa      	bls.n	8001dde <_free_r+0x4a>
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	1858      	adds	r0, r3, r1
 8001dec:	42a0      	cmp	r0, r4
 8001dee:	d10b      	bne.n	8001e08 <_free_r+0x74>
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	4401      	add	r1, r0
 8001df4:	1858      	adds	r0, r3, r1
 8001df6:	4282      	cmp	r2, r0
 8001df8:	6019      	str	r1, [r3, #0]
 8001dfa:	d1dd      	bne.n	8001db8 <_free_r+0x24>
 8001dfc:	6810      	ldr	r0, [r2, #0]
 8001dfe:	6852      	ldr	r2, [r2, #4]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	4401      	add	r1, r0
 8001e04:	6019      	str	r1, [r3, #0]
 8001e06:	e7d7      	b.n	8001db8 <_free_r+0x24>
 8001e08:	d902      	bls.n	8001e10 <_free_r+0x7c>
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	602b      	str	r3, [r5, #0]
 8001e0e:	e7d3      	b.n	8001db8 <_free_r+0x24>
 8001e10:	6820      	ldr	r0, [r4, #0]
 8001e12:	1821      	adds	r1, r4, r0
 8001e14:	428a      	cmp	r2, r1
 8001e16:	bf04      	itt	eq
 8001e18:	6811      	ldreq	r1, [r2, #0]
 8001e1a:	6852      	ldreq	r2, [r2, #4]
 8001e1c:	6062      	str	r2, [r4, #4]
 8001e1e:	bf04      	itt	eq
 8001e20:	1809      	addeq	r1, r1, r0
 8001e22:	6021      	streq	r1, [r4, #0]
 8001e24:	605c      	str	r4, [r3, #4]
 8001e26:	e7c7      	b.n	8001db8 <_free_r+0x24>
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
 8001e2a:	bf00      	nop
 8001e2c:	240000f8 	.word	0x240000f8

08001e30 <_malloc_r>:
 8001e30:	b570      	push	{r4, r5, r6, lr}
 8001e32:	1ccd      	adds	r5, r1, #3
 8001e34:	f025 0503 	bic.w	r5, r5, #3
 8001e38:	3508      	adds	r5, #8
 8001e3a:	2d0c      	cmp	r5, #12
 8001e3c:	bf38      	it	cc
 8001e3e:	250c      	movcc	r5, #12
 8001e40:	2d00      	cmp	r5, #0
 8001e42:	4606      	mov	r6, r0
 8001e44:	db01      	blt.n	8001e4a <_malloc_r+0x1a>
 8001e46:	42a9      	cmp	r1, r5
 8001e48:	d903      	bls.n	8001e52 <_malloc_r+0x22>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	6033      	str	r3, [r6, #0]
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
 8001e52:	f000 f8f1 	bl	8002038 <__malloc_lock>
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <_malloc_r+0xac>)
 8001e58:	6814      	ldr	r4, [r2, #0]
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	b991      	cbnz	r1, 8001e84 <_malloc_r+0x54>
 8001e5e:	4c20      	ldr	r4, [pc, #128]	; (8001ee0 <_malloc_r+0xb0>)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	b91b      	cbnz	r3, 8001e6c <_malloc_r+0x3c>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f000 f83d 	bl	8001ee4 <_sbrk_r>
 8001e6a:	6020      	str	r0, [r4, #0]
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4630      	mov	r0, r6
 8001e70:	f000 f838 	bl	8001ee4 <_sbrk_r>
 8001e74:	1c43      	adds	r3, r0, #1
 8001e76:	d124      	bne.n	8001ec2 <_malloc_r+0x92>
 8001e78:	230c      	movs	r3, #12
 8001e7a:	6033      	str	r3, [r6, #0]
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	f000 f8dc 	bl	800203a <__malloc_unlock>
 8001e82:	e7e4      	b.n	8001e4e <_malloc_r+0x1e>
 8001e84:	680b      	ldr	r3, [r1, #0]
 8001e86:	1b5b      	subs	r3, r3, r5
 8001e88:	d418      	bmi.n	8001ebc <_malloc_r+0x8c>
 8001e8a:	2b0b      	cmp	r3, #11
 8001e8c:	d90f      	bls.n	8001eae <_malloc_r+0x7e>
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	50cd      	str	r5, [r1, r3]
 8001e92:	18cc      	adds	r4, r1, r3
 8001e94:	4630      	mov	r0, r6
 8001e96:	f000 f8d0 	bl	800203a <__malloc_unlock>
 8001e9a:	f104 000b 	add.w	r0, r4, #11
 8001e9e:	1d23      	adds	r3, r4, #4
 8001ea0:	f020 0007 	bic.w	r0, r0, #7
 8001ea4:	1ac3      	subs	r3, r0, r3
 8001ea6:	d0d3      	beq.n	8001e50 <_malloc_r+0x20>
 8001ea8:	425a      	negs	r2, r3
 8001eaa:	50e2      	str	r2, [r4, r3]
 8001eac:	e7d0      	b.n	8001e50 <_malloc_r+0x20>
 8001eae:	428c      	cmp	r4, r1
 8001eb0:	684b      	ldr	r3, [r1, #4]
 8001eb2:	bf16      	itet	ne
 8001eb4:	6063      	strne	r3, [r4, #4]
 8001eb6:	6013      	streq	r3, [r2, #0]
 8001eb8:	460c      	movne	r4, r1
 8001eba:	e7eb      	b.n	8001e94 <_malloc_r+0x64>
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	6849      	ldr	r1, [r1, #4]
 8001ec0:	e7cc      	b.n	8001e5c <_malloc_r+0x2c>
 8001ec2:	1cc4      	adds	r4, r0, #3
 8001ec4:	f024 0403 	bic.w	r4, r4, #3
 8001ec8:	42a0      	cmp	r0, r4
 8001eca:	d005      	beq.n	8001ed8 <_malloc_r+0xa8>
 8001ecc:	1a21      	subs	r1, r4, r0
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f000 f808 	bl	8001ee4 <_sbrk_r>
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d0cf      	beq.n	8001e78 <_malloc_r+0x48>
 8001ed8:	6025      	str	r5, [r4, #0]
 8001eda:	e7db      	b.n	8001e94 <_malloc_r+0x64>
 8001edc:	240000f8 	.word	0x240000f8
 8001ee0:	240000fc 	.word	0x240000fc

08001ee4 <_sbrk_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4c06      	ldr	r4, [pc, #24]	; (8001f00 <_sbrk_r+0x1c>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4605      	mov	r5, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	f7fe fd80 	bl	80009f4 <_sbrk>
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d102      	bne.n	8001efe <_sbrk_r+0x1a>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	b103      	cbz	r3, 8001efe <_sbrk_r+0x1a>
 8001efc:	602b      	str	r3, [r5, #0]
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
 8001f00:	24000100 	.word	0x24000100

08001f04 <__sread>:
 8001f04:	b510      	push	{r4, lr}
 8001f06:	460c      	mov	r4, r1
 8001f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0c:	f000 f896 	bl	800203c <_read_r>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	bfab      	itete	ge
 8001f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f16:	89a3      	ldrhlt	r3, [r4, #12]
 8001f18:	181b      	addge	r3, r3, r0
 8001f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f1e:	bfac      	ite	ge
 8001f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f22:	81a3      	strhlt	r3, [r4, #12]
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <__swrite>:
 8001f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2a:	461f      	mov	r7, r3
 8001f2c:	898b      	ldrh	r3, [r1, #12]
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	4605      	mov	r5, r0
 8001f32:	460c      	mov	r4, r1
 8001f34:	4616      	mov	r6, r2
 8001f36:	d505      	bpl.n	8001f44 <__swrite+0x1e>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f40:	f000 f868 	bl	8002014 <_lseek_r>
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f4e:	81a3      	strh	r3, [r4, #12]
 8001f50:	4632      	mov	r2, r6
 8001f52:	463b      	mov	r3, r7
 8001f54:	4628      	mov	r0, r5
 8001f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f5a:	f000 b817 	b.w	8001f8c <_write_r>

08001f5e <__sseek>:
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	460c      	mov	r4, r1
 8001f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f66:	f000 f855 	bl	8002014 <_lseek_r>
 8001f6a:	1c43      	adds	r3, r0, #1
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	bf15      	itete	ne
 8001f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f7a:	81a3      	strheq	r3, [r4, #12]
 8001f7c:	bf18      	it	ne
 8001f7e:	81a3      	strhne	r3, [r4, #12]
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <__sclose>:
 8001f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f86:	f000 b813 	b.w	8001fb0 <_close_r>
	...

08001f8c <_write_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4c07      	ldr	r4, [pc, #28]	; (8001fac <_write_r+0x20>)
 8001f90:	4605      	mov	r5, r0
 8001f92:	4608      	mov	r0, r1
 8001f94:	4611      	mov	r1, r2
 8001f96:	2200      	movs	r2, #0
 8001f98:	6022      	str	r2, [r4, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7fe fbf7 	bl	800078e <_write>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	d102      	bne.n	8001faa <_write_r+0x1e>
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	b103      	cbz	r3, 8001faa <_write_r+0x1e>
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	24000100 	.word	0x24000100

08001fb0 <_close_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4c06      	ldr	r4, [pc, #24]	; (8001fcc <_close_r+0x1c>)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	f7fe fc03 	bl	80007c6 <_close>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	d102      	bne.n	8001fca <_close_r+0x1a>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	b103      	cbz	r3, 8001fca <_close_r+0x1a>
 8001fc8:	602b      	str	r3, [r5, #0]
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	24000100 	.word	0x24000100

08001fd0 <_fstat_r>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4c07      	ldr	r4, [pc, #28]	; (8001ff0 <_fstat_r+0x20>)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4605      	mov	r5, r0
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	f7fe fbfe 	bl	80007de <_fstat>
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	d102      	bne.n	8001fec <_fstat_r+0x1c>
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	b103      	cbz	r3, 8001fec <_fstat_r+0x1c>
 8001fea:	602b      	str	r3, [r5, #0]
 8001fec:	bd38      	pop	{r3, r4, r5, pc}
 8001fee:	bf00      	nop
 8001ff0:	24000100 	.word	0x24000100

08001ff4 <_isatty_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4c06      	ldr	r4, [pc, #24]	; (8002010 <_isatty_r+0x1c>)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	6023      	str	r3, [r4, #0]
 8002000:	f7fe fbfd 	bl	80007fe <_isatty>
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d102      	bne.n	800200e <_isatty_r+0x1a>
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	b103      	cbz	r3, 800200e <_isatty_r+0x1a>
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	24000100 	.word	0x24000100

08002014 <_lseek_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4c07      	ldr	r4, [pc, #28]	; (8002034 <_lseek_r+0x20>)
 8002018:	4605      	mov	r5, r0
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	2200      	movs	r2, #0
 8002020:	6022      	str	r2, [r4, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f7fe fbf6 	bl	8000814 <_lseek>
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	d102      	bne.n	8002032 <_lseek_r+0x1e>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	b103      	cbz	r3, 8002032 <_lseek_r+0x1e>
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	bd38      	pop	{r3, r4, r5, pc}
 8002034:	24000100 	.word	0x24000100

08002038 <__malloc_lock>:
 8002038:	4770      	bx	lr

0800203a <__malloc_unlock>:
 800203a:	4770      	bx	lr

0800203c <_read_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4c07      	ldr	r4, [pc, #28]	; (800205c <_read_r+0x20>)
 8002040:	4605      	mov	r5, r0
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	2200      	movs	r2, #0
 8002048:	6022      	str	r2, [r4, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f7fe fb82 	bl	8000754 <_read>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_read_r+0x1e>
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	b103      	cbz	r3, 800205a <_read_r+0x1e>
 8002058:	602b      	str	r3, [r5, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	24000100 	.word	0x24000100

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
